---不求劳苦功高，但要成果显著；
>业务建模：概念结构、概念层次
	>领域：
		>订单：
		>用户：
			>属性：固有属性
				>id:
				>手机：
				>消费金额：
			>行为：活动/动作；
		>教研人员：
			>属性：
				>教师ID：
				>所属训练营:
				>是否直播：
				>推广码：
		>训练营：
			>属性：
				>课程：
				>报名人数/报名上限/开班比例条件：
				>截至时间：
				>营期数量：
		>营期：		
			>属性： 
				>所属训练营：
				>第几期：期号
				>报名人数：
				>状态：开课/招生/结束
				>课程表：
					>课程学习须知：
					>课：
						>节：
							>解锁时间：
							>是否解锁：
							>序号：
						>节：...
					>课：...	
			>行为： 
				>排班管理：
					>班主任列表：
					>助教列表：
		>班级：
			>属性：	
				>所属训练营：
				>所属期：
				>班级ID:
				>教师：
				>人数：
				>转化人数：
				>开课时间：
				>班级成绩：
					>节：第几节课
						>听课率：
						>完课率：
				>关联微信群：
				>关联教师、督导、助教列表：	
			>行为： 
				>训练营调班：调整某个人报的某营某期某班，为另一个期；
				>课程迁移：
				>调班日志记录：
		>学员：
			>属性： 
				>用户ID：
				>学号：
				>手机号：
				>昨日听课：是否
				>累计听课：次数
				>完成作业：是否
				>消费金额：
				>是否加群/加老师：
				>群内发言数：
				>来源渠道：抖音/9元裂变
		>题库：
			>属性： 
				>ID:
				>题目名称：
				>题型：
				>备注：
		>作业：
			>属性：	
				>名称:
				>类型：
				>题目数：
				>交卷数：
			>行为： 行为也有行为记录；所以可以记录形式描述行为；
				>题目管理：
					>A@A: 增/删/改/查 一条 ”题目+分值“ 记录；
		>单课：
			>属性： 
				>单课名称：
				>阅读量：
				>上架时间：
				>作业名称：
			>行为： 行为记录；
				>作业管理：
		>运营工具：
			>补价调课：对一个订单 进行 调整课程/如增加课程同时增加收费等 线下收费记录
			>补价调课记录：对上述调整行为记录下来；表明调整过；且具体怎么调整的也有痕迹；
			>虚拟号：
				>记录格式：	
					>
			>删除账号：
		>电话机器人：发语音给用户用。
			>属性：	
				>语音发送任务：
					>业务类型：
					>选择用户类型：按期选择/直接导入手机号码
					>云服务商：
					>发送语音内容：
					>发送时间：
					>发送次数：
				>任务反馈信息：
					>语音接通人数：
					>是否发送短信：
					>语音发送状态：已完成/待开始/
	>虚拟领域：构造领域、衍生领域；
		>白名单：特殊用户列表
	>活动：泳道活动图;规则；流程；开始和结束；概念体系内活动图；概念体系之间的活动图；搞一个活动，有钱的出钱；没钱的赚眼熟宣传当作打广告；----像街头卖艺；
		--产生价值的活动；传递价值的活动；有价值有意义的活动；简单简洁的提供某种服务的活动；在线服务的活动；活动经过的描述：就可以n个采样点--重点关键点完全描述；
		--对对象新增一个活动：需要明确确定活动针对/适用的对象范围(哪些特征的用户--不多不少；而且用户已经存在的多维取值分布需要知道(因为用户来源不同 同时用户状态在转换)；)；
		--不同对象在活动中有不同的限制、不同角色、不同动作：一是要明确用户划分标准；第二是对应的动作集合/角色集合；
		--业务点：每个小环节就是。对准确的对象施加准确的动作(根据此，看业务代码核心是x看变更数据部分)；。程序流程的细分好比数学步骤的细分--细分的价值；。。流程中/泳道图中：指向是并行的 对象是多样的；(并行和多样是实际情况，总结他们为统一描述就是抽象)
		--业务转化为/等效为记录操作；对科学和技术，规律的含义都是简化；
			>什么价值？
			>如何产生？
			>如何传递？
			>如何完全确定一个价值活动？：不是用几句话；而是用量/列/字段/属性/统计量；----静态描述；经过则是动态描述；经过的确定：离散的数据集合；n个有序采样点构成的集合；
			>如何根据确定的价值活动而抽象其层次？
		--所有业务分为三类：服务产品的介绍、服务交易的达成、服务过程的记录。产品介绍(用户登录网站、大类页、列表、详情、广告、活动)、产品交易的达成(支付、订单)、服务过程的记录(交付产品、使用产品、消费流程(多步多环节)、服务进度、反馈产品体验)。。。所以建模分为：用户、产品、活动、交易、服务进度记录、反馈；
			>产品介绍：给用户是这样;给开发者是那样；给学习者是另一种样；
			
		>系列课：
			>线下开课：线下买课的交易记录；
				>订单号：
				>商品名：
				>售价：
				>支付途径：
				>实付：
				>操作人：
			>系列课列表：
				>课名：
				>课程管理：操作
					>课：课就是章节
						>节：节就是 单课
							>试看：
							>解锁时间：
							>排序：
					>结业作业：
						>作业名：
						>ID:
			>打包工具：将多门课打包来出售
			>推广链接：课程包的销售记录	
				>产品名称：
				>售价：
				>打包课类型：
				>总销量：
		>APP: 配置
			>小白必读列表：
			>首页banner:
				>图片：
				>跳转类型：
				>跳转URL：目的地
		>市场管理：只是简单的人员管理
		>拼团活动：
			>团ID：
			>课名称：
			>拼团人数：
			>拼团活动起止时间：
			>团长价：
			>活动状态：禁用/结束/
			>成团实付金额：
		>拼团活动订单：
			>订单号：	
			>团ID：
			>课程名：
			>付款金额：
			>拼团状态：
		>音频管理：
		>配置：即 分布式配置 。。配置各个key-val
		>投放管理：
			>渠道管理：
				>渠道ID：
				>渠道名：如保险渠道/快手红包下载专属/公众号
				>渠道码：
				>累计注册用户数：
				>累计消费用户数：
				>子渠道名称/码：
			>投放平台管理：
				>渠道名称：
				>渠道码：
				>累计注册用户数：
				>累计消费用户数：
			>落地页链接管理：
				>落地页名称：
				>链接项目：如菲尔来/蓝金融
				>链接类型：留资/下载/支付
				>预览：
			>投放渠道管理：
				>投放平台：短信
				>投放子渠道：
				>品牌：
				>代理商：
				>投放类型：如直播
				>主播：主播人
				>投放人员：
				>>包含投放效果的记录：曝光量/阅读量、点击量、pv/uv
		>裂变：
			>邀请统计：
				>邀请人：
				>邀请人所在班级/班主任：
				>被邀请人：
				>被邀请人注册时间、付费时间、付费金额：
			>进阶课邀请统计：
				>类似同上 
			>提现统计：用户id-系统流水号-提现时间-提现金额
			>小白营裂变总体统计：
				>邀请入口：
				>页面UV：
				>海报：分享/扫码/邀请注册/邀请支付
		>直播： 关于课程老师的一个短时活动
			>开课时间：
			>招生时间：
			>报名人数：
			>入群人数：
			>留资人数：
			>关注公众号人数：
			>渠道码： 
		>直播课程：课程 中哪些有直播 的一个映射表示 
			>课程名：
			>关联直播期：
			
			
			
			
>具体业务：若干个环节 的并行的流程
	>数据请求：
	>事件响应：
		>订阅事件回调：@com.dianfeng.knowledge.module.business.service.wechat.WechatCallBackServiceImpl#handleEventRequestMessage()
			>入口来源：@com.dianfeng.knowledge.wechat.client.controller.WechatController#handleCenter(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)
				--说明：来自微信；
			>事件内容：用户openid, 订阅号的openid
			>处理：
				>根据openid从微信http方式获取用户信息 WechatUserInfo：包含头像、国家等；openid/unionid
				--分布式锁定：
				>用户openid--订阅号appid关系建立入库；
				>获取用户信息后进行其他的处理：从t_customer根据unionid获取；
					>新建用户：
						>从 t_openid_customerid 根据 openid 查询出 customid；
						>从 t_customer 根据 customid 查询 用户信息 CustomerData ；一定不是空的；将WechatUserInfo数据转移到 这个对象里；更新回去；
						>使用 t_customer 的id 查 t_customer_source 来找 到 用户的渠道/子渠道的信息 ，发送给抖音/广点通/快手：根据不同的策略有不同的实现@GdtAdApiReportStrategy()
							>发送内容：上述+ 从 t_order 查出的id 
							>发送方式：先回调构造完整的数据；后调用rocketmq 发送到某个主题下；“rocketmq.topic.adApiReportDataTopic” 
					#####新增逻辑：开始分营期分班		
				--数据记录入库：当作埋点数据；
				#如果是小白营 公众号：进行消息推送：
					>推送内容：t_system_configure 里的 mini_course_address  小白营地址链接；
					>推送方式：http方式  。。
		>分班函数：@com.dianfeng.knowledge.module.business.service.order.OrderServiceImpl#allocateClass
			>入口来源：@com.dianfeng.knowledge.wechat.client.controller.PayController#wechatH5PayNotify()--->OrderServiceImpl.handlePaySuccessOrder()-->toHandlePaySuccessOrder()
		>支付提交处理：@com.dianfeng.knowledge.wechat.client.controller.PromotionController#submitOrderH5WechatPay()
		
	
	
	
>基本业务点：
	>报名：网页授权登录。/auth /checkLiveOrderAndSignUp
		>首层过程：检测用户是否报小白营或者黑名单--->用户渠道信息的正确设置-->加一条 空订单空分班记录-->用户重新分班-->获取用户最近的营期班记录和微信群记录，进行app消息推送：告知 要加群/多少人已加群/催加群
			>用户重新分班：查询未满额的营期--->满了则强行用最后一个营期-->查询该营期的所有班,随机选择一个班--->将班级营期班等信息更新回t_live_entry_record 表对应记录里(微信群id仍然为-1)；--->异步执行：更新用户对公众号为已经订阅/提交消息到redis：即发入群和报名成功消息。--->-->修改用户营期班状态(状态为已支付)和支付单状态(已支付)-->推送报名成功消息(http方式发送营销短信)--->先发消息到mq, 后消费者 以http方式调用微信接口向用户发送：直播投放催入群 通知
										   --->未满则遍历每个营期-->查询该营期的所有班,随机选择一个班-->查询该班未满的一个微信群-->更新微信群曝光了和班级曝光量-->将班级营期班等信息更新回t_live_entry_record 表对应记录里--->增加营期人数-->发加群消息和报名成功消息；。-->--->同上。
										   
		--涉及表：
			>用户购买课程(某一单)后所在的营期班：t_live_entry_record
			>一个用户/营期班的渠道/链接/报名平台：t_live_record_source 
			>用户来源：t_live_customer_source ： id/通道/链接id
			>渠道：t_put_in_channel 渠道可能是主播：所以有主播id；  投放类型：0元/9元
			>主播：t_live_lecturer
			>营期：t_live_camp_date  ： 主播id/投放类型/品牌(快财/犀牛)/是否满额(可以再加人)
			>班：t_live_class： 营期id/班级名称/限额/教师id/曝光量
			>用户渠道：t_customer_source
			>用户：t_customer ；  查询用户基本信息：http方式用openid调微信接口
			>微信群：t_live_wechat_group :班级id/曝光量/曝光上限/群二维码
			>支付单：t_live_pay_order ： 用户id/状态/金额/订单编号
			>课程：t_course ： 类型(1小白/2进阶/3高阶/4精选/8团购)/课程名
			>订单：t_order： 课程id/用户id
			>教师：t_teacher： 群二维码/
		>直播课报名：9元检查-->如果结果不能继续支付：小白营和直播课可以重复；进阶课就报异常；-->用参数查班/营期，后执行加入直播课：新增0元空单DLivePayOrder，新增营班期用户记录DLiveEntryRecord(无加微信群；已支付)-->增加营期人数、订单来源记录-->发送报名成功消息
	>支付：
		>先留资的支付：
			>先用户信息生产：短信验证码正确-->电话号确认方式增加用户CustomerData+用户渠道新增DCustomerSource-->如果app 版本被锁定-对每门课创建-1订单--->记录日志LoginLogParameter--->渠道内部推广价查询,取第一个课程-->取课程id
			>取抖音推广课程--从系统配置里取douyinPromotionCourseId：--->查询用户该门课程最近的订单：如果订单未过期抛出错误：否则构建用户支付单DCustomerPayOrder入库-->构建订单DOrder入库-->构造微信支付消息WechatPayMessage(回调地址+订单号+课程id+微信类型)，发送给微信-->构造返回地址+订单号+返回地址 到实体PayData返回。--->订单id+渠道+超链接id 封装到实体 入库；
				>订单营销来源定义: CCustomerPayOrderConst.MarketSourceEnum 小白营营销/直播营销/进阶课营销。
				--支付宝支付方式类似AliPayMessage.
	>回传：(数据报告: 符合条件的用户回传,抖音追踪落地页转化效果---后它做优化)
		>抖音：
			>内容：clickId+eventType
			>内容来源：接消息；
				>消息发送方及其构造消息的过程：时许上：(抖音快手)微信H5支付提交http请求到后端-->保存用户订单+通知微信(用户openid+订单号+商号appid+付款额 之类)-->构造报告消息，并发送到消息中心；消息包括(订单号+电话；渠道channel;来源页url; 否0元/是原生数据；点击id/知识动作类型AdApiReportConst.ApiKnowledgeActions-提交支付)
					>渠道类型：AdApiReportConst.ApiChannels.DOUYIN
					>知识动作类型：AdApiReportConst.ApiKnowledgeActions： 预约、报名、关注、注册、非留资预约、长按群/公众号二维码、9元行为、提交支付、已支付、APP投放点击检测
					>原生提交消息过程：根据渠道找到平台策略(抖音)-->报告消息进一步处理：1.可能用来源url:Referer来获取clickId 2.根据知识动作获取一个行动实体(只缓存+有下一个报告)；3.转移数据到一个新的报告实体(通道、电话-订单号、缓存键、有下一个报告、仅缓存)
						>实际接消息用到：
							>reportChannel: 确定策略；值来源：AdApiReportConst.ApiChannels.DOUYIN 
							>clickId: 发消息时来源：geneDTO > 从referer通过lamda处理提取clickId=xx得到 > 通过cachekey 获取 (缓存了)
							>actionType: 唯一来自 lamda 表达式：。actionTypes
							>cacheKey: 缓存key, 仅仅作缓存用(orderId)；用来查值：clickId; 缓存的是：cacheKey--clickId 。。cacheKey构成：dy_orderid  即一个通道前缀+订单号
					>发送消息：通用方法。
			>回传时间：
				>微信H5支付提交订单：知识动作类型：xx
				>微信支付回调：知识动作类型：xx 。。公众号/H5/app支付/支付宝/京东H5支付  的 回调；
				>报名的时候：知识动作类型：xx..。。实际为处理网络授权请求：处理网页授权登录请求(GET)。/auth
					>用户信息获取：用收到的code 调微信http接口 获取；
					>从订单中找用户小白营课程订单：有才在后面当作cacheKey 去回传。 	
				>微信发来的用户消息：订阅/取消订阅/点击	。订阅消息时：通过openid从微信获取用户基本信息， 返回信息里包含用户unionid -->验证订阅消息：先变更入库DCustomerSubscribe， 后用unionid查用户CustomerData---没有的：查找 DOpenidCustomerid 表里的记录得到cusid-->用来再查 CustomerData 存在时变更落地；-->cusId存在：就开始查用户渠道对应表DCustomerSource--->存在，则开始同样方式：查用户的小白营订单，存在则进入回传。
					>回传设置：知识动作类型：AdApiReportConst.ApiKnowledgeActions.SUBSCRIBE ， 是0元；非原生；wetchatType从wechatconfig里取：WechatAppConfigData.TYPE。n	
	>查课：
		>开课时间：
		>产品分类：
			>小白营：
			>直播班：
			>进阶课：
		>渠道分类：
			>微信公众号自然流量渠道：
		>课程分类：
			>小白营：type=1
			>直播课：2
			>进阶课：其他
	>分班：营期/
		>主动分班：/renewAllocateClass  获取64微信头像--->若已分班，从记录里查出营期班群信息返回--->查询最近一个未支付的记录，执行实际的分班和发送报名成功+入群消息--->修改记录和订单为已支付，相关记录信息设置到返回-->推送认证未入群消息-->使用记录里的通道更新到 客户-源、记录源--->查询记录源，发送非原生ENTRY知识类型事件0元； 发送抖音回传WECHAT_LOGIN事件0元--->关注公众号回传事件SUBSCRIBE_ENTRY
	>登录：
	>访问：	
	>加群：查所有的未满营期-->对每个营期，查一个曝光量<x的微信群-->增加曝光次数更新回去-->告警一次：剩多少个群曝光量未达标
	>加群2：/joinWechatGroupWith0yuanLogin 获取微信头像64个-->参数里有群id则直接获取群二维码，设置到返回；--->如果报过名，则直接获取营期班群信息设置返回-->报过小白营则直接设置群二维码返回；--->有营期记录但没有分班，直接返回；-->此时已分班，加入支付单t_live_pay_order， 增加直播记录源DLiveRecordSource+营期记录t_live_entry_record(无营期班群)，增加用户源DLiveCustomerSource，设置等待分班到结果 返回--->发两条消息到mq：行动类型：如果等待分班则RESERVATION，否则JOIN_GROUP 。消息2：PAY_JOIN_GROUP/非原生数据；
	>加群3：/joinWechatGroupWithLogin 新版加群业务：获取微信头像64个-->参数里有群id则直接获取群二维码，设置到返回-->如果报过名，则直接获取营期班群信息(群二维码/流程类型)设置返回，提交0元非原生JOIN_GROUP事件 给渠道 返回--->已报小白营，获取记录和群二维码而返回--->用户渠道-链接新增t_live_customer_source--->获取渠道信息中的主播-->再次判断用户是否报名了直播--->用渠道/主播来进行分班	
		>带直播主播的分班：取主播人名、该人该渠道所有的营期班
	>关注：用户是否关注在：t_customer里的openids的 appid/ subscribe--->查询出如果没有关注，则(会通过调微信接口看用户对该公众号是否关注？)设置为关注，更新回去；
>各条业务流程：
	>从微信内注册报名到分班：调度
	>从广告点击到回传抖音：推荐
	>从听课到考试/结束：学习/价值
>工具流程：
	>wetchatType的获取：从 t_live_pay_order 获取 appid--->用来从mysql表配置里获取微信配置wechatConfig-->type属性就是
	
	
	
-----开发：
	>2020/11/3: 入口参考方法：com.dianfeng.knowledge.wechat.client.controller.PromotionManager#filterAndCacheChannelClickidFromReferer()
		>实际可重用：从这里开始：adApiReportService.submit(dto)
		>则：数据先入库；
		
-----问题：
	>微信内注册报名：这个事件的发送； 只有分班这一个入口 是否正常？
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	