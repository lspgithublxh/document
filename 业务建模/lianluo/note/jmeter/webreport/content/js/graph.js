/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 75.0, "minX": 0.0, "maxY": 10850.0, "series": [{"data": [[0.0, 75.0], [0.1, 84.0], [0.2, 89.0], [0.3, 95.0], [0.4, 103.0], [0.5, 110.0], [0.6, 128.0], [0.7, 153.0], [0.8, 173.0], [0.9, 196.0], [1.0, 259.0], [1.1, 385.0], [1.2, 633.0], [1.3, 755.0], [1.4, 935.0], [1.5, 1028.0], [1.6, 1169.0], [1.7, 1249.0], [1.8, 1363.0], [1.9, 1472.0], [2.0, 1602.0], [2.1, 1702.0], [2.2, 1822.0], [2.3, 1905.0], [2.4, 1979.0], [2.5, 2037.0], [2.6, 2087.0], [2.7, 2126.0], [2.8, 2156.0], [2.9, 2187.0], [3.0, 2220.0], [3.1, 2242.0], [3.2, 2261.0], [3.3, 2280.0], [3.4, 2299.0], [3.5, 2316.0], [3.6, 2329.0], [3.7, 2339.0], [3.8, 2352.0], [3.9, 2364.0], [4.0, 2374.0], [4.1, 2384.0], [4.2, 2395.0], [4.3, 2403.0], [4.4, 2411.0], [4.5, 2420.0], [4.6, 2427.0], [4.7, 2435.0], [4.8, 2443.0], [4.9, 2454.0], [5.0, 2461.0], [5.1, 2468.0], [5.2, 2475.0], [5.3, 2481.0], [5.4, 2487.0], [5.5, 2493.0], [5.6, 2499.0], [5.7, 2505.0], [5.8, 2510.0], [5.9, 2516.0], [6.0, 2520.0], [6.1, 2526.0], [6.2, 2530.0], [6.3, 2535.0], [6.4, 2541.0], [6.5, 2546.0], [6.6, 2550.0], [6.7, 2556.0], [6.8, 2561.0], [6.9, 2567.0], [7.0, 2572.0], [7.1, 2577.0], [7.2, 2581.0], [7.3, 2586.0], [7.4, 2590.0], [7.5, 2594.0], [7.6, 2598.0], [7.7, 2602.0], [7.8, 2607.0], [7.9, 2610.0], [8.0, 2613.0], [8.1, 2617.0], [8.2, 2622.0], [8.3, 2625.0], [8.4, 2630.0], [8.5, 2633.0], [8.6, 2637.0], [8.7, 2641.0], [8.8, 2645.0], [8.9, 2649.0], [9.0, 2653.0], [9.1, 2656.0], [9.2, 2660.0], [9.3, 2663.0], [9.4, 2666.0], [9.5, 2670.0], [9.6, 2673.0], [9.7, 2677.0], [9.8, 2680.0], [9.9, 2682.0], [10.0, 2686.0], [10.1, 2688.0], [10.2, 2691.0], [10.3, 2695.0], [10.4, 2698.0], [10.5, 2701.0], [10.6, 2704.0], [10.7, 2707.0], [10.8, 2711.0], [10.9, 2714.0], [11.0, 2717.0], [11.1, 2719.0], [11.2, 2722.0], [11.3, 2725.0], [11.4, 2727.0], [11.5, 2731.0], [11.6, 2734.0], [11.7, 2736.0], [11.8, 2739.0], [11.9, 2744.0], [12.0, 2746.0], [12.1, 2750.0], [12.2, 2753.0], [12.3, 2756.0], [12.4, 2759.0], [12.5, 2761.0], [12.6, 2764.0], [12.7, 2766.0], [12.8, 2769.0], [12.9, 2772.0], [13.0, 2773.0], [13.1, 2777.0], [13.2, 2780.0], [13.3, 2782.0], [13.4, 2785.0], [13.5, 2788.0], [13.6, 2790.0], [13.7, 2794.0], [13.8, 2796.0], [13.9, 2798.0], [14.0, 2800.0], [14.1, 2803.0], [14.2, 2806.0], [14.3, 2809.0], [14.4, 2811.0], [14.5, 2814.0], [14.6, 2816.0], [14.7, 2818.0], [14.8, 2820.0], [14.9, 2822.0], [15.0, 2824.0], [15.1, 2826.0], [15.2, 2828.0], [15.3, 2830.0], [15.4, 2833.0], [15.5, 2835.0], [15.6, 2837.0], [15.7, 2840.0], [15.8, 2842.0], [15.9, 2845.0], [16.0, 2847.0], [16.1, 2849.0], [16.2, 2852.0], [16.3, 2854.0], [16.4, 2857.0], [16.5, 2859.0], [16.6, 2861.0], [16.7, 2863.0], [16.8, 2865.0], [16.9, 2867.0], [17.0, 2870.0], [17.1, 2872.0], [17.2, 2874.0], [17.3, 2877.0], [17.4, 2880.0], [17.5, 2882.0], [17.6, 2884.0], [17.7, 2887.0], [17.8, 2889.0], [17.9, 2892.0], [18.0, 2895.0], [18.1, 2897.0], [18.2, 2899.0], [18.3, 2901.0], [18.4, 2904.0], [18.5, 2906.0], [18.6, 2908.0], [18.7, 2910.0], [18.8, 2913.0], [18.9, 2915.0], [19.0, 2918.0], [19.1, 2920.0], [19.2, 2922.0], [19.3, 2924.0], [19.4, 2926.0], [19.5, 2929.0], [19.6, 2931.0], [19.7, 2934.0], [19.8, 2936.0], [19.9, 2938.0], [20.0, 2940.0], [20.1, 2942.0], [20.2, 2944.0], [20.3, 2946.0], [20.4, 2949.0], [20.5, 2951.0], [20.6, 2953.0], [20.7, 2955.0], [20.8, 2957.0], [20.9, 2960.0], [21.0, 2962.0], [21.1, 2964.0], [21.2, 2966.0], [21.3, 2968.0], [21.4, 2970.0], [21.5, 2972.0], [21.6, 2974.0], [21.7, 2976.0], [21.8, 2978.0], [21.9, 2981.0], [22.0, 2983.0], [22.1, 2985.0], [22.2, 2987.0], [22.3, 2989.0], [22.4, 2991.0], [22.5, 2993.0], [22.6, 2995.0], [22.7, 2997.0], [22.8, 3000.0], [22.9, 3002.0], [23.0, 3004.0], [23.1, 3006.0], [23.2, 3008.0], [23.3, 3010.0], [23.4, 3011.0], [23.5, 3013.0], [23.6, 3016.0], [23.7, 3018.0], [23.8, 3020.0], [23.9, 3022.0], [24.0, 3024.0], [24.1, 3026.0], [24.2, 3028.0], [24.3, 3030.0], [24.4, 3031.0], [24.5, 3033.0], [24.6, 3035.0], [24.7, 3037.0], [24.8, 3040.0], [24.9, 3042.0], [25.0, 3043.0], [25.1, 3045.0], [25.2, 3047.0], [25.3, 3049.0], [25.4, 3051.0], [25.5, 3053.0], [25.6, 3055.0], [25.7, 3057.0], [25.8, 3059.0], [25.9, 3061.0], [26.0, 3063.0], [26.1, 3065.0], [26.2, 3066.0], [26.3, 3068.0], [26.4, 3070.0], [26.5, 3072.0], [26.6, 3074.0], [26.7, 3076.0], [26.8, 3078.0], [26.9, 3080.0], [27.0, 3082.0], [27.1, 3083.0], [27.2, 3086.0], [27.3, 3087.0], [27.4, 3089.0], [27.5, 3091.0], [27.6, 3093.0], [27.7, 3095.0], [27.8, 3097.0], [27.9, 3099.0], [28.0, 3101.0], [28.1, 3103.0], [28.2, 3105.0], [28.3, 3106.0], [28.4, 3108.0], [28.5, 3110.0], [28.6, 3113.0], [28.7, 3115.0], [28.8, 3117.0], [28.9, 3119.0], [29.0, 3121.0], [29.1, 3123.0], [29.2, 3124.0], [29.3, 3126.0], [29.4, 3129.0], [29.5, 3130.0], [29.6, 3132.0], [29.7, 3134.0], [29.8, 3136.0], [29.9, 3139.0], [30.0, 3141.0], [30.1, 3143.0], [30.2, 3145.0], [30.3, 3146.0], [30.4, 3148.0], [30.5, 3150.0], [30.6, 3152.0], [30.7, 3154.0], [30.8, 3156.0], [30.9, 3158.0], [31.0, 3160.0], [31.1, 3162.0], [31.2, 3164.0], [31.3, 3166.0], [31.4, 3168.0], [31.5, 3170.0], [31.6, 3172.0], [31.7, 3173.0], [31.8, 3176.0], [31.9, 3178.0], [32.0, 3180.0], [32.1, 3181.0], [32.2, 3184.0], [32.3, 3186.0], [32.4, 3188.0], [32.5, 3189.0], [32.6, 3191.0], [32.7, 3193.0], [32.8, 3194.0], [32.9, 3197.0], [33.0, 3199.0], [33.1, 3201.0], [33.2, 3203.0], [33.3, 3205.0], [33.4, 3207.0], [33.5, 3209.0], [33.6, 3210.0], [33.7, 3212.0], [33.8, 3215.0], [33.9, 3217.0], [34.0, 3218.0], [34.1, 3220.0], [34.2, 3222.0], [34.3, 3224.0], [34.4, 3227.0], [34.5, 3228.0], [34.6, 3230.0], [34.7, 3232.0], [34.8, 3235.0], [34.9, 3237.0], [35.0, 3239.0], [35.1, 3241.0], [35.2, 3243.0], [35.3, 3245.0], [35.4, 3248.0], [35.5, 3250.0], [35.6, 3252.0], [35.7, 3254.0], [35.8, 3256.0], [35.9, 3258.0], [36.0, 3260.0], [36.1, 3262.0], [36.2, 3264.0], [36.3, 3266.0], [36.4, 3268.0], [36.5, 3270.0], [36.6, 3272.0], [36.7, 3274.0], [36.8, 3276.0], [36.9, 3277.0], [37.0, 3279.0], [37.1, 3280.0], [37.2, 3282.0], [37.3, 3284.0], [37.4, 3285.0], [37.5, 3287.0], [37.6, 3289.0], [37.7, 3291.0], [37.8, 3293.0], [37.9, 3295.0], [38.0, 3297.0], [38.1, 3299.0], [38.2, 3300.0], [38.3, 3302.0], [38.4, 3304.0], [38.5, 3306.0], [38.6, 3308.0], [38.7, 3309.0], [38.8, 3311.0], [38.9, 3313.0], [39.0, 3316.0], [39.1, 3317.0], [39.2, 3319.0], [39.3, 3321.0], [39.4, 3323.0], [39.5, 3324.0], [39.6, 3326.0], [39.7, 3328.0], [39.8, 3330.0], [39.9, 3332.0], [40.0, 3334.0], [40.1, 3336.0], [40.2, 3337.0], [40.3, 3339.0], [40.4, 3341.0], [40.5, 3343.0], [40.6, 3345.0], [40.7, 3348.0], [40.8, 3350.0], [40.9, 3352.0], [41.0, 3354.0], [41.1, 3357.0], [41.2, 3360.0], [41.3, 3362.0], [41.4, 3364.0], [41.5, 3366.0], [41.6, 3368.0], [41.7, 3370.0], [41.8, 3372.0], [41.9, 3374.0], [42.0, 3377.0], [42.1, 3379.0], [42.2, 3380.0], [42.3, 3382.0], [42.4, 3384.0], [42.5, 3387.0], [42.6, 3388.0], [42.7, 3390.0], [42.8, 3392.0], [42.9, 3394.0], [43.0, 3396.0], [43.1, 3397.0], [43.2, 3399.0], [43.3, 3401.0], [43.4, 3403.0], [43.5, 3405.0], [43.6, 3408.0], [43.7, 3409.0], [43.8, 3411.0], [43.9, 3413.0], [44.0, 3414.0], [44.1, 3416.0], [44.2, 3418.0], [44.3, 3419.0], [44.4, 3421.0], [44.5, 3423.0], [44.6, 3425.0], [44.7, 3426.0], [44.8, 3428.0], [44.9, 3430.0], [45.0, 3432.0], [45.1, 3433.0], [45.2, 3435.0], [45.3, 3437.0], [45.4, 3439.0], [45.5, 3442.0], [45.6, 3443.0], [45.7, 3445.0], [45.8, 3447.0], [45.9, 3449.0], [46.0, 3451.0], [46.1, 3453.0], [46.2, 3454.0], [46.3, 3456.0], [46.4, 3458.0], [46.5, 3460.0], [46.6, 3462.0], [46.7, 3464.0], [46.8, 3466.0], [46.9, 3468.0], [47.0, 3470.0], [47.1, 3472.0], [47.2, 3474.0], [47.3, 3477.0], [47.4, 3479.0], [47.5, 3481.0], [47.6, 3483.0], [47.7, 3485.0], [47.8, 3487.0], [47.9, 3489.0], [48.0, 3491.0], [48.1, 3494.0], [48.2, 3497.0], [48.3, 3499.0], [48.4, 3500.0], [48.5, 3502.0], [48.6, 3504.0], [48.7, 3507.0], [48.8, 3508.0], [48.9, 3510.0], [49.0, 3512.0], [49.1, 3514.0], [49.2, 3517.0], [49.3, 3519.0], [49.4, 3521.0], [49.5, 3523.0], [49.6, 3525.0], [49.7, 3527.0], [49.8, 3529.0], [49.9, 3531.0], [50.0, 3533.0], [50.1, 3535.0], [50.2, 3537.0], [50.3, 3539.0], [50.4, 3541.0], [50.5, 3544.0], [50.6, 3545.0], [50.7, 3548.0], [50.8, 3549.0], [50.9, 3551.0], [51.0, 3553.0], [51.1, 3555.0], [51.2, 3557.0], [51.3, 3559.0], [51.4, 3561.0], [51.5, 3563.0], [51.6, 3565.0], [51.7, 3567.0], [51.8, 3569.0], [51.9, 3571.0], [52.0, 3573.0], [52.1, 3575.0], [52.2, 3577.0], [52.3, 3579.0], [52.4, 3581.0], [52.5, 3583.0], [52.6, 3585.0], [52.7, 3587.0], [52.8, 3589.0], [52.9, 3592.0], [53.0, 3593.0], [53.1, 3595.0], [53.2, 3598.0], [53.3, 3600.0], [53.4, 3603.0], [53.5, 3604.0], [53.6, 3606.0], [53.7, 3608.0], [53.8, 3610.0], [53.9, 3613.0], [54.0, 3615.0], [54.1, 3617.0], [54.2, 3620.0], [54.3, 3622.0], [54.4, 3624.0], [54.5, 3627.0], [54.6, 3629.0], [54.7, 3631.0], [54.8, 3633.0], [54.9, 3635.0], [55.0, 3638.0], [55.1, 3640.0], [55.2, 3642.0], [55.3, 3644.0], [55.4, 3647.0], [55.5, 3650.0], [55.6, 3652.0], [55.7, 3654.0], [55.8, 3657.0], [55.9, 3659.0], [56.0, 3660.0], [56.1, 3663.0], [56.2, 3665.0], [56.3, 3668.0], [56.4, 3670.0], [56.5, 3673.0], [56.6, 3675.0], [56.7, 3677.0], [56.8, 3680.0], [56.9, 3682.0], [57.0, 3684.0], [57.1, 3687.0], [57.2, 3689.0], [57.3, 3692.0], [57.4, 3694.0], [57.5, 3696.0], [57.6, 3699.0], [57.7, 3701.0], [57.8, 3704.0], [57.9, 3706.0], [58.0, 3708.0], [58.1, 3711.0], [58.2, 3713.0], [58.3, 3715.0], [58.4, 3718.0], [58.5, 3720.0], [58.6, 3722.0], [58.7, 3724.0], [58.8, 3727.0], [58.9, 3729.0], [59.0, 3731.0], [59.1, 3734.0], [59.2, 3736.0], [59.3, 3739.0], [59.4, 3741.0], [59.5, 3743.0], [59.6, 3745.0], [59.7, 3747.0], [59.8, 3750.0], [59.9, 3752.0], [60.0, 3755.0], [60.1, 3757.0], [60.2, 3759.0], [60.3, 3761.0], [60.4, 3764.0], [60.5, 3766.0], [60.6, 3768.0], [60.7, 3770.0], [60.8, 3773.0], [60.9, 3775.0], [61.0, 3778.0], [61.1, 3780.0], [61.2, 3783.0], [61.3, 3785.0], [61.4, 3788.0], [61.5, 3790.0], [61.6, 3792.0], [61.7, 3795.0], [61.8, 3797.0], [61.9, 3799.0], [62.0, 3802.0], [62.1, 3805.0], [62.2, 3807.0], [62.3, 3809.0], [62.4, 3813.0], [62.5, 3815.0], [62.6, 3817.0], [62.7, 3819.0], [62.8, 3822.0], [62.9, 3825.0], [63.0, 3827.0], [63.1, 3830.0], [63.2, 3832.0], [63.3, 3834.0], [63.4, 3838.0], [63.5, 3840.0], [63.6, 3843.0], [63.7, 3845.0], [63.8, 3847.0], [63.9, 3850.0], [64.0, 3852.0], [64.1, 3854.0], [64.2, 3856.0], [64.3, 3859.0], [64.4, 3862.0], [64.5, 3864.0], [64.6, 3867.0], [64.7, 3869.0], [64.8, 3873.0], [64.9, 3876.0], [65.0, 3879.0], [65.1, 3881.0], [65.2, 3885.0], [65.3, 3888.0], [65.4, 3891.0], [65.5, 3894.0], [65.6, 3897.0], [65.7, 3899.0], [65.8, 3902.0], [65.9, 3905.0], [66.0, 3908.0], [66.1, 3910.0], [66.2, 3913.0], [66.3, 3916.0], [66.4, 3919.0], [66.5, 3922.0], [66.6, 3924.0], [66.7, 3927.0], [66.8, 3930.0], [66.9, 3933.0], [67.0, 3935.0], [67.1, 3938.0], [67.2, 3941.0], [67.3, 3943.0], [67.4, 3947.0], [67.5, 3949.0], [67.6, 3952.0], [67.7, 3956.0], [67.8, 3959.0], [67.9, 3962.0], [68.0, 3965.0], [68.1, 3968.0], [68.2, 3972.0], [68.3, 3975.0], [68.4, 3978.0], [68.5, 3981.0], [68.6, 3984.0], [68.7, 3987.0], [68.8, 3991.0], [68.9, 3995.0], [69.0, 3998.0], [69.1, 4002.0], [69.2, 4006.0], [69.3, 4009.0], [69.4, 4013.0], [69.5, 4016.0], [69.6, 4020.0], [69.7, 4023.0], [69.8, 4025.0], [69.9, 4029.0], [70.0, 4033.0], [70.1, 4036.0], [70.2, 4039.0], [70.3, 4042.0], [70.4, 4046.0], [70.5, 4049.0], [70.6, 4053.0], [70.7, 4057.0], [70.8, 4059.0], [70.9, 4062.0], [71.0, 4067.0], [71.1, 4071.0], [71.2, 4075.0], [71.3, 4077.0], [71.4, 4081.0], [71.5, 4084.0], [71.6, 4087.0], [71.7, 4092.0], [71.8, 4095.0], [71.9, 4098.0], [72.0, 4101.0], [72.1, 4104.0], [72.2, 4107.0], [72.3, 4111.0], [72.4, 4115.0], [72.5, 4119.0], [72.6, 4122.0], [72.7, 4126.0], [72.8, 4129.0], [72.9, 4133.0], [73.0, 4137.0], [73.1, 4140.0], [73.2, 4145.0], [73.3, 4149.0], [73.4, 4153.0], [73.5, 4156.0], [73.6, 4161.0], [73.7, 4165.0], [73.8, 4169.0], [73.9, 4174.0], [74.0, 4179.0], [74.1, 4183.0], [74.2, 4188.0], [74.3, 4190.0], [74.4, 4194.0], [74.5, 4198.0], [74.6, 4202.0], [74.7, 4206.0], [74.8, 4211.0], [74.9, 4215.0], [75.0, 4219.0], [75.1, 4223.0], [75.2, 4228.0], [75.3, 4231.0], [75.4, 4236.0], [75.5, 4240.0], [75.6, 4245.0], [75.7, 4250.0], [75.8, 4254.0], [75.9, 4259.0], [76.0, 4263.0], [76.1, 4267.0], [76.2, 4273.0], [76.3, 4276.0], [76.4, 4279.0], [76.5, 4283.0], [76.6, 4287.0], [76.7, 4291.0], [76.8, 4296.0], [76.9, 4301.0], [77.0, 4306.0], [77.1, 4311.0], [77.2, 4316.0], [77.3, 4321.0], [77.4, 4325.0], [77.5, 4329.0], [77.6, 4334.0], [77.7, 4339.0], [77.8, 4344.0], [77.9, 4349.0], [78.0, 4354.0], [78.1, 4359.0], [78.2, 4365.0], [78.3, 4372.0], [78.4, 4378.0], [78.5, 4382.0], [78.6, 4387.0], [78.7, 4392.0], [78.8, 4396.0], [78.9, 4402.0], [79.0, 4408.0], [79.1, 4413.0], [79.2, 4418.0], [79.3, 4422.0], [79.4, 4427.0], [79.5, 4433.0], [79.6, 4437.0], [79.7, 4442.0], [79.8, 4447.0], [79.9, 4452.0], [80.0, 4457.0], [80.1, 4462.0], [80.2, 4467.0], [80.3, 4472.0], [80.4, 4477.0], [80.5, 4484.0], [80.6, 4490.0], [80.7, 4497.0], [80.8, 4503.0], [80.9, 4510.0], [81.0, 4515.0], [81.1, 4520.0], [81.2, 4527.0], [81.3, 4532.0], [81.4, 4538.0], [81.5, 4543.0], [81.6, 4549.0], [81.7, 4556.0], [81.8, 4561.0], [81.9, 4566.0], [82.0, 4573.0], [82.1, 4582.0], [82.2, 4587.0], [82.3, 4594.0], [82.4, 4599.0], [82.5, 4606.0], [82.6, 4611.0], [82.7, 4617.0], [82.8, 4625.0], [82.9, 4631.0], [83.0, 4638.0], [83.1, 4644.0], [83.2, 4650.0], [83.3, 4657.0], [83.4, 4664.0], [83.5, 4671.0], [83.6, 4677.0], [83.7, 4683.0], [83.8, 4689.0], [83.9, 4696.0], [84.0, 4702.0], [84.1, 4711.0], [84.2, 4719.0], [84.3, 4726.0], [84.4, 4732.0], [84.5, 4739.0], [84.6, 4748.0], [84.7, 4753.0], [84.8, 4761.0], [84.9, 4768.0], [85.0, 4776.0], [85.1, 4782.0], [85.2, 4788.0], [85.3, 4796.0], [85.4, 4802.0], [85.5, 4810.0], [85.6, 4816.0], [85.7, 4825.0], [85.8, 4831.0], [85.9, 4840.0], [86.0, 4847.0], [86.1, 4858.0], [86.2, 4865.0], [86.3, 4874.0], [86.4, 4882.0], [86.5, 4889.0], [86.6, 4895.0], [86.7, 4901.0], [86.8, 4908.0], [86.9, 4916.0], [87.0, 4927.0], [87.1, 4935.0], [87.2, 4943.0], [87.3, 4952.0], [87.4, 4960.0], [87.5, 4968.0], [87.6, 4975.0], [87.7, 4985.0], [87.8, 4993.0], [87.9, 5003.0], [88.0, 5011.0], [88.1, 5019.0], [88.2, 5030.0], [88.3, 5040.0], [88.4, 5050.0], [88.5, 5059.0], [88.6, 5069.0], [88.7, 5080.0], [88.8, 5089.0], [88.9, 5096.0], [89.0, 5105.0], [89.1, 5115.0], [89.2, 5124.0], [89.3, 5134.0], [89.4, 5143.0], [89.5, 5157.0], [89.6, 5166.0], [89.7, 5176.0], [89.8, 5187.0], [89.9, 5198.0], [90.0, 5211.0], [90.1, 5223.0], [90.2, 5234.0], [90.3, 5245.0], [90.4, 5257.0], [90.5, 5269.0], [90.6, 5278.0], [90.7, 5290.0], [90.8, 5299.0], [90.9, 5313.0], [91.0, 5325.0], [91.1, 5335.0], [91.2, 5348.0], [91.3, 5364.0], [91.4, 5376.0], [91.5, 5391.0], [91.6, 5403.0], [91.7, 5414.0], [91.8, 5428.0], [91.9, 5438.0], [92.0, 5453.0], [92.1, 5465.0], [92.2, 5478.0], [92.3, 5493.0], [92.4, 5514.0], [92.5, 5531.0], [92.6, 5546.0], [92.7, 5559.0], [92.8, 5576.0], [92.9, 5594.0], [93.0, 5609.0], [93.1, 5624.0], [93.2, 5639.0], [93.3, 5658.0], [93.4, 5679.0], [93.5, 5693.0], [93.6, 5711.0], [93.7, 5731.0], [93.8, 5747.0], [93.9, 5766.0], [94.0, 5790.0], [94.1, 5811.0], [94.2, 5830.0], [94.3, 5856.0], [94.4, 5877.0], [94.5, 5906.0], [94.6, 5931.0], [94.7, 5954.0], [94.8, 5986.0], [94.9, 6015.0], [95.0, 6042.0], [95.1, 6074.0], [95.2, 6108.0], [95.3, 6137.0], [95.4, 6173.0], [95.5, 6213.0], [95.6, 6247.0], [95.7, 6286.0], [95.8, 6322.0], [95.9, 6366.0], [96.0, 6399.0], [96.1, 6437.0], [96.2, 6472.0], [96.3, 6510.0], [96.4, 6552.0], [96.5, 6591.0], [96.6, 6625.0], [96.7, 6655.0], [96.8, 6695.0], [96.9, 6735.0], [97.0, 6767.0], [97.1, 6818.0], [97.2, 6862.0], [97.3, 6901.0], [97.4, 6935.0], [97.5, 6964.0], [97.6, 6996.0], [97.7, 7034.0], [97.8, 7076.0], [97.9, 7116.0], [98.0, 7152.0], [98.1, 7195.0], [98.2, 7224.0], [98.3, 7259.0], [98.4, 7296.0], [98.5, 7341.0], [98.6, 7390.0], [98.7, 7446.0], [98.8, 7508.0], [98.9, 7578.0], [99.0, 7675.0], [99.1, 7767.0], [99.2, 7864.0], [99.3, 7977.0], [99.4, 8080.0], [99.5, 8236.0], [99.6, 8370.0], [99.7, 8605.0], [99.8, 8858.0], [99.9, 9057.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2570.0, "series": [{"data": [[0.0, 180.0], [100.0, 272.0], [200.0, 59.0], [300.0, 42.0], [400.0, 12.0], [500.0, 25.0], [600.0, 42.0], [700.0, 29.0], [800.0, 28.0], [900.0, 42.0], [1000.0, 41.0], [1100.0, 49.0], [1200.0, 46.0], [1300.0, 50.0], [1400.0, 40.0], [1500.0, 41.0], [1600.0, 49.0], [1700.0, 45.0], [1800.0, 52.0], [1900.0, 77.0], [2000.0, 96.0], [2100.0, 144.0], [2200.0, 242.0], [2300.0, 429.0], [2400.0, 669.0], [2500.0, 1015.0], [2600.0, 1404.0], [2700.0, 1760.0], [2800.0, 2128.0], [2900.0, 2290.0], [3000.0, 2570.0], [3100.0, 2546.0], [3200.0, 2567.0], [3300.0, 2529.0], [3400.0, 2563.0], [3500.0, 2449.0], [3700.0, 2133.0], [3600.0, 2198.0], [3800.0, 1901.0], [3900.0, 1663.0], [4000.0, 1465.0], [4100.0, 1276.0], [4300.0, 989.0], [4200.0, 1177.0], [4500.0, 831.0], [4600.0, 772.0], [4400.0, 946.0], [4700.0, 699.0], [4800.0, 664.0], [4900.0, 601.0], [5000.0, 532.0], [5100.0, 489.0], [5200.0, 442.0], [5300.0, 386.0], [5600.0, 302.0], [5400.0, 384.0], [5500.0, 298.0], [5700.0, 253.0], [5800.0, 210.0], [5900.0, 190.0], [6000.0, 169.0], [6100.0, 147.0], [6200.0, 131.0], [6300.0, 130.0], [6500.0, 132.0], [6600.0, 140.0], [6400.0, 134.0], [6700.0, 125.0], [6800.0, 116.0], [6900.0, 159.0], [7000.0, 118.0], [7100.0, 135.0], [7200.0, 147.0], [7300.0, 103.0], [7400.0, 82.0], [7500.0, 70.0], [7600.0, 56.0], [7700.0, 43.0], [7800.0, 58.0], [7900.0, 46.0], [8100.0, 39.0], [8000.0, 42.0], [8200.0, 29.0], [8300.0, 33.0], [8400.0, 22.0], [8500.0, 18.0], [8600.0, 24.0], [8700.0, 21.0], [9000.0, 18.0], [8800.0, 24.0], [8900.0, 23.0], [9100.0, 9.0], [9200.0, 10.0], [9400.0, 3.0], [9300.0, 9.0], [9500.0, 4.0], [9600.0, 3.0], [9800.0, 1.0], [10400.0, 1.0], [10600.0, 1.0], [10800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 392.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 49042.0, "series": [{"data": [[0.0, 565.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 392.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 49042.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.692164179104483, "minX": 1.61829822E12, "maxY": 500.0, "series": [{"data": [[1.61829846E12, 500.0], [1.61829828E12, 500.0], [1.61829858E12, 468.5302760990644], [1.6182984E12, 500.0], [1.61829822E12, 500.0], [1.618299E12, 7.692164179104483], [1.61829852E12, 500.0], [1.61829834E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.618299E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 97.86764705882354, "minX": 1.0, "maxY": 4981.857142857143, "series": [{"data": [[2.0, 235.89999999999998], [3.0, 185.33333333333331], [4.0, 117.04878048780488], [5.0, 103.47368421052633], [6.0, 168.95833333333331], [7.0, 280.484375], [8.0, 97.86764705882354], [9.0, 102.4230769230769], [10.0, 163.15714285714282], [11.0, 231.20720720720723], [12.0, 155.0], [13.0, 152.0], [14.0, 141.0], [15.0, 125.0], [16.0, 124.0], [17.0, 144.0], [18.0, 156.0], [19.0, 172.0], [20.0, 156.66666666666666], [21.0, 189.0], [22.0, 158.0], [23.0, 171.0], [24.0, 347.0], [25.0, 212.5], [28.0, 255.33333333333334], [30.0, 278.0], [33.0, 219.0], [32.0, 384.3333333333333], [35.0, 219.0], [34.0, 160.0], [37.0, 233.0], [38.0, 434.0], [41.0, 181.0], [40.0, 288.0], [42.0, 417.0], [45.0, 328.0], [44.0, 547.3333333333334], [47.0, 365.0], [46.0, 468.5], [49.0, 1275.0], [48.0, 755.0], [51.0, 339.0], [50.0, 213.0], [53.0, 483.0], [52.0, 1083.0], [55.0, 992.0], [54.0, 782.0], [57.0, 1034.6666666666667], [56.0, 925.0], [59.0, 1181.3333333333333], [58.0, 1089.0], [61.0, 681.0], [60.0, 1363.0], [63.0, 661.0], [62.0, 1052.0], [67.0, 411.0], [66.0, 846.5], [65.0, 651.0], [64.0, 1252.0], [71.0, 473.0], [69.0, 349.0], [68.0, 788.0], [75.0, 2110.5], [74.0, 1296.0], [73.0, 1247.75], [72.0, 1190.0], [79.0, 943.0], [78.0, 2039.0], [77.0, 1245.0], [76.0, 909.0], [83.0, 847.0], [82.0, 1787.5], [80.0, 1288.0], [85.0, 1024.0], [84.0, 1501.0], [91.0, 1223.6], [89.0, 211.0], [88.0, 1187.3333333333333], [95.0, 1465.0], [94.0, 904.5], [93.0, 935.0], [92.0, 539.0], [99.0, 1267.0], [98.0, 657.0], [97.0, 677.5], [96.0, 1249.0], [103.0, 1774.3333333333333], [101.0, 957.0], [100.0, 3227.0], [106.0, 1213.0], [105.0, 1172.0], [104.0, 1402.0], [111.0, 1793.5], [110.0, 978.0], [109.0, 1393.0], [108.0, 1947.5], [115.0, 1593.4], [113.0, 992.0], [112.0, 1000.0], [119.0, 1320.3333333333333], [118.0, 980.0], [116.0, 2436.0], [123.0, 1171.0], [122.0, 1162.0], [121.0, 1192.5], [127.0, 1550.0], [126.0, 1098.0], [135.0, 1172.0], [134.0, 2566.5], [132.0, 2353.25], [130.0, 1865.6666666666667], [129.0, 1746.0], [128.0, 1405.5], [143.0, 2483.0], [142.0, 1678.0], [141.0, 1104.5], [139.0, 2182.5], [138.0, 2218.3333333333335], [137.0, 2202.0], [136.0, 1031.0], [151.0, 2041.5], [150.0, 2818.0], [149.0, 1784.6666666666667], [148.0, 1009.0], [147.0, 710.0], [146.0, 2011.0], [145.0, 1924.0], [144.0, 2621.0], [159.0, 2330.0], [158.0, 1381.0], [157.0, 1495.0], [156.0, 1202.0], [155.0, 630.0], [154.0, 1172.0], [153.0, 1411.0], [152.0, 1974.5], [167.0, 2299.8], [166.0, 2298.0], [165.0, 2312.6666666666665], [164.0, 744.0], [163.0, 1705.5], [162.0, 1156.0], [161.0, 1979.0], [160.0, 2080.0], [175.0, 2165.0], [174.0, 1603.25], [172.0, 1472.0], [171.0, 2529.0], [170.0, 1817.3333333333333], [169.0, 861.0], [168.0, 2063.5], [182.0, 2294.0], [181.0, 1710.0], [180.0, 2026.0], [179.0, 1954.0], [178.0, 2074.0], [177.0, 2516.0], [176.0, 1451.5], [191.0, 2284.0], [190.0, 2136.0], [189.0, 2465.25], [188.0, 1495.3333333333333], [187.0, 1847.0], [186.0, 1867.0], [185.0, 1624.6666666666667], [184.0, 1968.3333333333333], [199.0, 1796.0], [198.0, 1618.6666666666667], [195.0, 2565.5], [194.0, 2745.0], [193.0, 2535.5], [192.0, 1684.0], [207.0, 2434.5], [206.0, 1756.0], [205.0, 1839.0], [204.0, 1733.0], [203.0, 1955.0], [202.0, 2713.0], [201.0, 1648.0], [200.0, 1976.0], [215.0, 1928.0], [214.0, 1728.0], [213.0, 2119.6666666666665], [212.0, 1810.0], [211.0, 2186.75], [210.0, 2021.0], [208.0, 2842.0], [223.0, 1861.0], [222.0, 1452.6666666666667], [221.0, 2161.5], [220.0, 2739.6666666666665], [219.0, 2427.0], [218.0, 2327.5], [216.0, 1660.4], [231.0, 2772.0], [230.0, 1797.5], [229.0, 2607.0], [227.0, 2871.5], [226.0, 1855.5], [225.0, 2166.0], [224.0, 1571.0], [239.0, 2105.0], [237.0, 2968.0], [236.0, 2995.0], [235.0, 3997.0], [234.0, 2812.0], [233.0, 2273.6666666666665], [232.0, 2280.0], [247.0, 1692.0], [246.0, 2585.3333333333335], [245.0, 2983.6666666666665], [244.0, 1733.0], [243.0, 1856.5], [242.0, 1598.0], [241.0, 1295.0], [240.0, 1632.0], [255.0, 2607.0], [254.0, 2599.0], [253.0, 2942.5], [252.0, 2663.0], [251.0, 3193.3333333333335], [250.0, 2929.6], [249.0, 2805.0], [248.0, 3162.6666666666665], [270.0, 3545.75], [271.0, 4195.0], [269.0, 3110.285714285714], [268.0, 2580.0], [267.0, 3335.0], [266.0, 2855.333333333333], [265.0, 4064.5], [264.0, 2267.5], [263.0, 2310.0], [257.0, 2034.0], [256.0, 3520.4], [259.0, 3585.5], [258.0, 3586.5], [262.0, 3396.0], [261.0, 2349.0], [260.0, 3439.777777777778], [286.0, 4084.0], [287.0, 4259.0], [285.0, 2855.0], [284.0, 4449.0], [283.0, 3230.4], [281.0, 3898.777777777778], [280.0, 3297.3333333333335], [279.0, 3978.3333333333335], [273.0, 2930.5], [272.0, 3015.3333333333335], [275.0, 3457.8], [274.0, 3598.571428571429], [277.0, 4482.0], [276.0, 4595.5], [302.0, 4024.75], [303.0, 3997.3333333333335], [301.0, 3474.0], [300.0, 3113.0], [299.0, 3648.2999999999997], [298.0, 3581.6666666666665], [297.0, 3517.6666666666665], [296.0, 3010.0], [295.0, 3787.3333333333335], [288.0, 4131.0], [290.0, 3949.0], [289.0, 2757.0], [294.0, 2966.0], [293.0, 4043.833333333333], [292.0, 3791.6], [318.0, 3459.4444444444443], [319.0, 3755.5], [317.0, 3860.0], [316.0, 3737.0], [315.0, 2848.0], [314.0, 3639.4], [313.0, 3926.0], [312.0, 3189.5], [311.0, 3990.0], [305.0, 4324.0], [304.0, 2724.0], [307.0, 3508.0], [306.0, 3718.4], [310.0, 3216.0], [309.0, 4212.0], [308.0, 3356.1666666666665], [334.0, 4819.0], [335.0, 4146.833333333333], [333.0, 3807.5], [332.0, 3202.5], [331.0, 3729.5], [330.0, 3856.0], [329.0, 2547.0], [328.0, 3918.0], [327.0, 3938.5], [321.0, 4038.0], [320.0, 3469.142857142857], [323.0, 3573.0], [322.0, 3723.5], [326.0, 3647.0], [325.0, 3826.3333333333335], [324.0, 4104.0], [350.0, 3811.0], [351.0, 3912.6666666666665], [349.0, 4193.333333333333], [348.0, 4292.0], [347.0, 4310.5], [346.0, 3681.0], [345.0, 4279.25], [344.0, 4981.857142857143], [343.0, 4336.333333333333], [337.0, 4624.0], [336.0, 3315.0], [339.0, 2430.0], [338.0, 3876.6], [342.0, 2376.0], [341.0, 3439.0], [340.0, 3694.5], [366.0, 3962.6666666666665], [367.0, 4418.0], [365.0, 4326.88888888889], [364.0, 4314.333333333333], [363.0, 4291.333333333333], [362.0, 4251.0], [361.0, 3998.5], [360.0, 4718.0], [359.0, 3982.125], [352.0, 4326.700000000001], [355.0, 3143.5], [353.0, 4097.75], [358.0, 4519.5], [357.0, 3253.0], [356.0, 3856.0], [381.0, 3815.8571428571427], [383.0, 3483.6666666666665], [380.0, 3499.0], [371.0, 3697.6666666666665], [370.0, 3332.5], [369.0, 3590.5], [368.0, 3716.5], [379.0, 4160.0], [378.0, 2367.5], [377.0, 3795.6666666666665], [376.0, 3303.75], [375.0, 3636.6666666666665], [374.0, 3403.8571428571427], [373.0, 3380.0], [398.0, 3081.0], [399.0, 3888.6666666666665], [397.0, 2799.0], [396.0, 3788.0], [395.0, 4036.0], [394.0, 3542.3333333333335], [393.0, 3173.6666666666665], [392.0, 3099.0], [391.0, 3306.75], [385.0, 3851.5], [384.0, 3084.0], [387.0, 3706.25], [386.0, 3760.0], [389.0, 3570.75], [388.0, 3777.0], [414.0, 3290.6666666666665], [415.0, 3362.3333333333335], [413.0, 3336.0], [412.0, 2870.6666666666665], [411.0, 3462.75], [410.0, 4008.2], [409.0, 3720.714285714286], [408.0, 2679.0], [407.0, 3573.0], [401.0, 3037.75], [400.0, 3752.5], [403.0, 3399.4], [402.0, 3300.0], [406.0, 4006.222222222222], [405.0, 3738.0], [430.0, 3770.0], [431.0, 3361.25], [429.0, 3978.0], [428.0, 3393.9], [427.0, 3336.75], [426.0, 3291.285714285714], [425.0, 3373.0], [424.0, 3275.0], [423.0, 3473.1428571428573], [416.0, 3522.3333333333335], [419.0, 3532.3333333333335], [417.0, 3359.4], [422.0, 3430.2], [421.0, 3414.0], [420.0, 3549.5], [446.0, 3791.875], [447.0, 3319.428571428571], [445.0, 3536.5], [444.0, 3864.3333333333335], [443.0, 3529.2], [442.0, 3799.0], [441.0, 3836.25], [440.0, 3488.5], [439.0, 3834.5], [432.0, 3083.0], [435.0, 3636.6153846153843], [434.0, 3389.428571428572], [438.0, 3543.0], [437.0, 3667.714285714286], [436.0, 3391.0], [462.0, 3302.333333333333], [463.0, 3333.2999999999997], [461.0, 3628.21875], [460.0, 3261.666666666667], [459.0, 3679.0], [458.0, 3837.0], [457.0, 4000.0], [456.0, 3580.3333333333335], [455.0, 3493.1052631578946], [449.0, 3496.222222222222], [448.0, 3497.0], [451.0, 3975.5], [450.0, 3880.8], [454.0, 3212.0], [453.0, 3316.2], [452.0, 3427.8749999999995], [478.0, 3936.0], [479.0, 3070.5], [477.0, 3153.6666666666665], [476.0, 3198.2727272727275], [475.0, 3281.4], [474.0, 3316.5882352941176], [473.0, 2915.6], [472.0, 3409.0], [471.0, 3391.3333333333335], [465.0, 3180.6800000000003], [464.0, 3485.8], [467.0, 3278.714285714286], [466.0, 2963.0], [470.0, 3447.2142857142853], [469.0, 3047.142857142857], [468.0, 3445.5714285714284], [494.0, 3518.5], [495.0, 3236.7333333333336], [493.0, 3287.7391304347825], [492.0, 3503.142857142857], [491.0, 3210.7888888888892], [490.0, 3219.2105263157896], [489.0, 3254.9375000000005], [488.0, 3522.0], [487.0, 3170.4999999999995], [481.0, 3673.0], [480.0, 3402.5555555555557], [483.0, 3436.0454545454545], [482.0, 3504.1875], [486.0, 3265.4047619047615], [485.0, 3285.8085106382987], [484.0, 3561.8045977011484], [500.0, 3828.386125514779], [499.0, 2828.351230425058], [498.0, 2962.4400000000005], [497.0, 3039.9267015706796], [496.0, 3230.9591836734694], [1.0, 101.33333333333333]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[489.41078821576457, 3748.1668033360484]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4127.2, "minX": 1.61829822E12, "maxY": 134043.61666666667, "series": [{"data": [[1.61829846E12, 58905.0], [1.61829828E12, 56525.7], [1.61829858E12, 64980.3], [1.6182984E12, 67829.3], [1.61829822E12, 20004.6], [1.618299E12, 4127.2], [1.61829852E12, 60445.0], [1.61829834E12, 52175.2]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61829846E12, 116407.5], [1.61829828E12, 111705.55], [1.61829858E12, 128413.45], [1.6182984E12, 134043.61666666667], [1.61829822E12, 39532.9], [1.618299E12, 8156.133333333333], [1.61829852E12, 119450.83333333333], [1.61829834E12, 103108.13333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.618299E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 172.61194029850753, "minX": 1.61829822E12, "maxY": 4292.2551652892535, "series": [{"data": [[1.61829846E12, 3870.684444444441], [1.61829828E12, 4092.2491486173726], [1.61829858E12, 3267.109491645927], [1.6182984E12, 3447.8481098876255], [1.61829822E12, 4275.92494226329], [1.618299E12, 172.61194029850753], [1.61829852E12, 3760.9847133758], [1.61829834E12, 4292.2551652892535]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.618299E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 172.4347014925374, "minX": 1.61829822E12, "maxY": 4292.088990554907, "series": [{"data": [[1.61829846E12, 3870.504052287584], [1.61829828E12, 4092.0766925486987], [1.61829858E12, 3266.920488209501], [1.6182984E12, 3447.6681802701823], [1.61829822E12, 4275.780600461889], [1.618299E12, 172.4347014925374], [1.61829852E12, 3760.791719745222], [1.61829834E12, 4292.088990554907]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.618299E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.00559701492537314, "minX": 1.61829822E12, "maxY": 2.0065434949961465, "series": [{"data": [[1.61829846E12, 0.03869281045751633], [1.61829828E12, 0.03705217272851105], [1.61829858E12, 0.028320891100841385], [1.6182984E12, 0.03609944375070957], [1.61829822E12, 2.0065434949961465], [1.618299E12, 0.00559701492537314], [1.61829852E12, 0.04140127388535037], [1.61829834E12, 0.036599763872491205]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.618299E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 75.0, "minX": 1.61829822E12, "maxY": 10850.0, "series": [{"data": [[1.61829846E12, 7711.0], [1.61829828E12, 8799.0], [1.61829858E12, 6302.0], [1.6182984E12, 7908.0], [1.61829822E12, 9600.0], [1.618299E12, 1277.0], [1.61829852E12, 7932.0], [1.61829834E12, 10850.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61829846E12, 5161.0], [1.61829828E12, 5811.8], [1.61829858E12, 4145.0], [1.6182984E12, 4515.0], [1.61829822E12, 7710.799999999998], [1.618299E12, 312.90000000000003], [1.61829852E12, 5164.800000000001], [1.61829834E12, 6551.500000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61829846E12, 6207.389999999998], [1.61829828E12, 7613.0599999999995], [1.61829858E12, 4983.600000000002], [1.6182984E12, 6150.799999999999], [1.61829822E12, 9078.219999999994], [1.618299E12, 713.15], [1.61829852E12, 6443.919999999998], [1.61829834E12, 8369.23]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61829846E12, 5564.0], [1.61829828E12, 6888.899999999996], [1.61829858E12, 4418.0], [1.6182984E12, 5074.5], [1.61829822E12, 8333.249999999998], [1.618299E12, 610.5999999999995], [1.61829852E12, 5697.45], [1.61829834E12, 7189.749999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.61829846E12, 302.0], [1.61829828E12, 306.0], [1.61829858E12, 124.0], [1.6182984E12, 334.0], [1.61829822E12, 605.0], [1.618299E12, 75.0], [1.61829852E12, 443.0], [1.61829834E12, 511.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61829846E12, 3721.0], [1.61829828E12, 3826.0], [1.61829858E12, 3277.0], [1.6182984E12, 3290.0], [1.61829822E12, 3521.5], [1.618299E12, 115.5], [1.61829852E12, 3587.0], [1.61829834E12, 3894.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.618299E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 94.5, "minX": 2.0, "maxY": 7199.0, "series": [{"data": [[2.0, 1982.0], [6.0, 5775.0], [8.0, 108.5], [11.0, 6735.0], [12.0, 153.5], [18.0, 320.5], [19.0, 245.0], [23.0, 5782.0], [24.0, 4638.5], [28.0, 3950.0], [29.0, 4515.0], [30.0, 4301.5], [33.0, 171.0], [32.0, 94.5], [36.0, 133.5], [38.0, 5667.0], [41.0, 2716.0], [42.0, 1590.0], [45.0, 5104.0], [44.0, 5080.0], [46.0, 3947.0], [49.0, 7199.0], [50.0, 264.0], [52.0, 3873.5], [56.0, 184.0], [59.0, 3746.0], [61.0, 3192.0], [60.0, 5154.5], [62.0, 6141.5], [65.0, 4144.0], [64.0, 4995.0], [70.0, 4386.0], [71.0, 4789.5], [69.0, 3850.0], [74.0, 4856.5], [73.0, 4129.5], [75.0, 4073.5], [76.0, 1944.0], [78.0, 4798.0], [77.0, 3468.0], [82.0, 3739.0], [83.0, 4183.0], [81.0, 5542.5], [84.0, 4021.5], [85.0, 3706.0], [87.0, 5288.5], [88.0, 2834.5], [89.0, 3388.0], [90.0, 3553.5], [95.0, 5549.5], [93.0, 3223.0], [92.0, 4183.0], [96.0, 3241.5], [99.0, 4994.0], [98.0, 4054.0], [97.0, 4253.0], [103.0, 3962.0], [102.0, 5145.5], [100.0, 3256.0], [101.0, 3723.0], [107.0, 4077.0], [105.0, 4510.0], [104.0, 3633.0], [110.0, 4766.0], [109.0, 4242.0], [108.0, 3979.5], [111.0, 4103.0], [113.0, 3430.0], [114.0, 4669.5], [115.0, 3625.0], [112.0, 3853.5], [117.0, 3856.5], [118.0, 4732.5], [119.0, 3925.0], [116.0, 3744.0], [122.0, 4547.0], [120.0, 3775.5], [123.0, 4116.0], [124.0, 3484.0], [125.0, 5446.0], [127.0, 3771.5], [126.0, 3781.5], [128.0, 3566.5], [131.0, 3317.0], [134.0, 3426.5], [130.0, 3401.0], [133.0, 3658.0], [132.0, 3364.0], [129.0, 3559.0], [135.0, 3431.5], [140.0, 3335.0], [142.0, 2981.5], [138.0, 3571.5], [139.0, 3520.0], [137.0, 4490.0], [143.0, 3798.0], [141.0, 3912.5], [136.0, 3627.0], [144.0, 3705.5], [150.0, 3640.0], [149.0, 3602.0], [148.0, 3359.0], [151.0, 3868.0], [146.0, 3536.0], [145.0, 3928.0], [147.0, 3399.0], [154.0, 3526.5], [155.0, 3147.0], [152.0, 3745.0], [156.0, 3160.0], [159.0, 3343.0], [153.0, 3498.0], [157.0, 3443.0], [158.0, 3765.5], [165.0, 3186.0], [163.0, 3438.0], [161.0, 3473.5], [167.0, 3153.5], [162.0, 3313.5], [164.0, 3353.5], [166.0, 3118.0], [160.0, 2629.5], [168.0, 2996.0], [170.0, 3733.0], [175.0, 3257.0], [174.0, 3789.0], [173.0, 3099.0], [169.0, 3718.0], [171.0, 3192.0], [172.0, 3149.0], [181.0, 3458.0], [176.0, 3081.0], [177.0, 3742.0], [182.0, 3326.5], [183.0, 3080.0], [178.0, 3410.0], [188.0, 3771.5], [186.0, 3896.5], [189.0, 4567.0], [185.0, 3462.5], [191.0, 3008.5], [190.0, 2804.5], [195.0, 3233.0], [198.0, 3001.5], [194.0, 3296.0], [197.0, 3025.0], [203.0, 2832.0], [204.0, 3065.5], [207.0, 3205.0], [200.0, 3105.0], [212.0, 6526.5], [219.0, 2922.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 219.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 93.5, "minX": 2.0, "maxY": 7199.0, "series": [{"data": [[2.0, 1982.0], [6.0, 5773.5], [8.0, 108.5], [11.0, 6735.0], [12.0, 153.0], [18.0, 320.5], [19.0, 245.0], [23.0, 5782.0], [24.0, 4638.5], [28.0, 3950.0], [29.0, 4515.0], [30.0, 4301.5], [33.0, 171.0], [32.0, 93.5], [36.0, 133.5], [38.0, 5666.5], [41.0, 2716.0], [42.0, 1590.0], [45.0, 5104.0], [44.0, 5079.5], [46.0, 3947.0], [49.0, 7199.0], [50.0, 264.0], [52.0, 3873.5], [56.0, 183.5], [59.0, 3746.0], [61.0, 3192.0], [60.0, 5154.5], [62.0, 6141.0], [65.0, 4144.0], [64.0, 4994.5], [70.0, 4386.0], [71.0, 4789.5], [69.0, 3850.0], [74.0, 4856.5], [73.0, 4129.5], [75.0, 4073.5], [76.0, 1943.5], [78.0, 4797.5], [77.0, 3467.0], [82.0, 3739.0], [83.0, 4183.0], [81.0, 5542.5], [84.0, 4021.0], [85.0, 3706.0], [87.0, 5288.0], [88.0, 2834.0], [89.0, 3388.0], [90.0, 3553.5], [95.0, 5549.5], [93.0, 3223.0], [92.0, 4182.5], [96.0, 3239.0], [99.0, 4994.0], [98.0, 4053.0], [97.0, 4253.0], [103.0, 3962.0], [102.0, 5145.5], [100.0, 3255.5], [101.0, 3723.0], [107.0, 4077.0], [105.0, 4510.0], [104.0, 3633.0], [110.0, 4766.0], [109.0, 4242.0], [108.0, 3979.0], [111.0, 4103.0], [113.0, 3430.0], [114.0, 4669.5], [115.0, 3625.0], [112.0, 3853.5], [117.0, 3856.5], [118.0, 4732.5], [119.0, 3925.0], [116.0, 3743.5], [122.0, 4547.0], [120.0, 3775.0], [123.0, 4115.0], [124.0, 3484.0], [125.0, 5446.0], [127.0, 3771.5], [126.0, 3781.0], [128.0, 3566.0], [131.0, 3317.0], [134.0, 3426.5], [130.0, 3401.0], [133.0, 3658.0], [132.0, 3363.5], [129.0, 3559.0], [135.0, 3431.0], [140.0, 3334.0], [142.0, 2981.5], [138.0, 3571.5], [139.0, 3519.5], [137.0, 4490.0], [143.0, 3798.0], [141.0, 3911.5], [136.0, 3627.0], [144.0, 3705.5], [150.0, 3640.0], [149.0, 3601.0], [148.0, 3359.0], [151.0, 3868.0], [146.0, 3535.5], [145.0, 3928.0], [147.0, 3398.5], [154.0, 3526.0], [155.0, 3147.0], [152.0, 3745.0], [156.0, 3159.5], [159.0, 3343.0], [153.0, 3498.0], [157.0, 3442.5], [158.0, 3765.0], [165.0, 3185.0], [163.0, 3438.0], [161.0, 3473.5], [167.0, 3153.5], [162.0, 3313.5], [164.0, 3353.5], [166.0, 3118.0], [160.0, 2629.5], [168.0, 2996.0], [170.0, 3733.0], [175.0, 3257.0], [174.0, 3789.0], [173.0, 3099.0], [169.0, 3718.0], [171.0, 3192.0], [172.0, 3149.0], [181.0, 3458.0], [176.0, 3081.0], [177.0, 3742.0], [182.0, 3326.5], [183.0, 3080.0], [178.0, 3409.5], [188.0, 3771.0], [186.0, 3896.0], [189.0, 4567.0], [185.0, 3462.0], [191.0, 3008.5], [190.0, 2804.5], [195.0, 3233.0], [198.0, 3000.5], [194.0, 3296.0], [197.0, 3024.0], [203.0, 2832.0], [204.0, 3065.5], [207.0, 3205.0], [200.0, 3105.0], [212.0, 6526.5], [219.0, 2922.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 219.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.933333333333334, "minX": 1.61829822E12, "maxY": 146.78333333333333, "series": [{"data": [[1.61829846E12, 127.46666666666667], [1.61829828E12, 122.33333333333333], [1.61829858E12, 132.46666666666667], [1.6182984E12, 146.78333333333333], [1.61829822E12, 51.63333333333333], [1.618299E12, 8.933333333333334], [1.61829852E12, 130.8], [1.61829834E12, 112.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.618299E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.933333333333334, "minX": 1.61829822E12, "maxY": 146.81666666666666, "series": [{"data": [[1.61829846E12, 127.5], [1.61829828E12, 122.35], [1.61829858E12, 140.65], [1.6182984E12, 146.81666666666666], [1.61829822E12, 43.3], [1.618299E12, 8.933333333333334], [1.61829852E12, 130.83333333333334], [1.61829834E12, 112.93333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.618299E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.933333333333334, "minX": 1.61829822E12, "maxY": 146.81666666666666, "series": [{"data": [[1.61829846E12, 127.5], [1.61829828E12, 122.35], [1.61829858E12, 140.65], [1.6182984E12, 146.81666666666666], [1.61829822E12, 43.3], [1.618299E12, 8.933333333333334], [1.61829852E12, 130.83333333333334], [1.61829834E12, 112.93333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.618299E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 8.933333333333334, "minX": 1.61829822E12, "maxY": 146.81666666666666, "series": [{"data": [[1.61829846E12, 127.5], [1.61829828E12, 122.35], [1.61829858E12, 140.65], [1.6182984E12, 146.81666666666666], [1.61829822E12, 43.3], [1.618299E12, 8.933333333333334], [1.61829852E12, 130.83333333333334], [1.61829834E12, 112.93333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.618299E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

