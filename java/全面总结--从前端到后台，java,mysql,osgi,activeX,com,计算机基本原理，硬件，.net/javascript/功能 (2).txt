1.总共：dom动态操作、样式修饰、绑定事件、后台访问。
	不常用的：window操作。

2.不常用对象：
  navigaor：浏览器对象，navigator.geolocation。地理位置
  window:窗口对象，可以绑定事件。
  document:文档对象，可以绑定事件。事件如：DOMContentLoaded


3.插件：
 aop
 cookie
 debug
 mousewheel
 swfobject
 upload

4.语法
 try{}catch(e){}

5.ActiveObject
  启动本地的一个应用程序，或者启动远端服务器上的一个程序。
  本质上是构建一个javascript对象，它的方法中可以调用本地引用程序来创建该程序的对象（或者文件）。
  --不仅可以描述，而且可以实际创建。
  //相当于java中的一个一般应用程序类。


6.绑定函数到window或者jquery对象 
 》 $.fn.函数名 = function(){}；//则可以把函数绑定到jquery对象上，那么用户就可以$("对象").函数名()来调用该函数了。
 》直接在javascript里定义函数可以直接绑定到window对象里，也可以window.函数名来绑定。

7.new 对象的构造函数constructor 和原型链__proto__(两大属性)
  》__proto__即相当于super。。指向一个对象：该对象包含：constructor, __proto__两个属性。
   》constructor构造函数
   》__proto__原型链, 有终点。 Object对象就没有__proto__这个属性了。需要set get了。原型链的对象的原型链的....

8.函数的原型prototype和原型链__proto__ (两大属性)
   》__proto__原型链指向父函数，父函数最终指向匿名函数（无名函数），匿名函数的原型链指向一个Object对象---而不再是一个函数--因为没有父函数。
   》prototype原型,指向一个对象，如果这个函数是构造函数，且是某一个对象的构造函数，那么就会指向这个对象的原型链__proto__ (即：对象的构造函数的原型指向对象的原型链)
   
9.js
  》预定义函数和预定义对象：有基本的三大函数：Object()函数，--》 ()匿名函数，《-- --》Function()函数。指向范围递减。和一个特殊的Object对象，这个对象的全部属性内部指向。
  》预定义函数时：Object()和Function()的原型链指向匿名函数,找到特殊的之前已经定义好的那个特殊Object对象,原型Object()指向默认特殊Object对象----这个没有原型链的对象，不能外部构造--只有一个,{}只是一个new Object()对象，Function()指向匿名函数。顺便，匿名函数的原型链指向这个特殊对象，匿名函数的构造方法指向Function()函数
    定义一个一般的函数时：先new方式实例化一个Object()对象，使它原型链指向默认Object对象，构造方法指向函数本身。而这个new的Object对象就是函数的原型。而函数的原型链指向匿名函数。。。改变这个原型对象，就改变了函数的原型。函数原型的作用：实例化函数得到的对象，会继承到函数原型的方法。--对象继承对象的方法。（函数实例化对象继承函数原型对象的方法）。
				（由于调用函数--直接调用函数来执行，对于this.XXX的方法，只是定义，不会执行。所以，函数不会继承函数）
  》定义一个一般的对象时：对于Object, new Object()生成一个对象，其实这个对象只有__proto__原型链这一个属性。
			  对于一般的函数的实例化，在上一步生成一个Object对象后，再定义它的constructor,并指向到该一般的函数。而原型链__proto__要重指向到该一般函数的原型对象。然后使用call方法，来吸收，该一般函数显式定义的方法和属性：this. ,,,this..-----顺便也执行了一遍该函数（尤其函数里面不只是this.语句）。

----特殊结论：》原型链和原型都指向对象。  称原型链对象和原型对象。构造方法都指向一个函数。
              》对象直接使用它的函数--当做一般函数来执行。.constructor()就可以。  


  
  

  