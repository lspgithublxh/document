<?xml version="1.0" encoding="UTF-8"?>  
<beans:beans xmlns="http://www.springframework.org/schema/security"  
  xmlns:beans="http://www.springframework.org/schema/beans"  
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
  xsi:schemaLocation="http://www.springframework.org/schema/beans  
		   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
		   http://www.springframework.org/schema/security  
		   http://www.springframework.org/schema/security/spring-security-3.1.xsd">  
	<!--security最基本配置， 一是登录时的认证， 二是任何httpweb请求的权权匹配检查，配则放过不配则拦截-->
    <!--可以改成入口点配置，来加入自己的filter基本加密 -->
	<!--自动配置还会在首次访问时(没有session,securityContext)时返回自己的登录界面 -->
   <security:http auto-config="true">
       <!--拦截请求1 权限相关，会在每次请求的时候都可能被使用，但认证则只会在session未建立的时候、securityContext未建立的时候-->
        <security:intercept-url pattern="/hello" 
            access="ROLE_ADMIN" /> 
		<!--拦截请求2 -->
        <security:intercept-url pattern="/**" access="ROLE_USER" />
		<!--用基本验证 来覆盖前面的自动配置；本质上即加了“基本过滤Filter” -->
        <security:http-basic />
		<!--登出配置 -->
		<security:logout />
		<!--实行摘要认证 -->
		<!--<security:custom-filter ref="digestFilter" position="BASIC_AUTH_FILTER" /> -->
		
    </security:http>
	<!--认证的时候被使用，即第一次访问、登录本项目时候使用..一是认证--看存不存在。二是存在的时候利用配置信息生成
         该session的securityContext的基本信息(即用户信息：姓名、密码、权限等等，当然可以自己加--如果使用自己的userService)	-->
	<security:authentication-manager>
        <security:authentication-provider>
            <security:user-service id="userService">
                <security:user authorities="ROLE_USER" name="tom"
                    password="tom" />
                <security:user authorities="ROLE_USER, ROLE_ADMIN"
                    name="admin" password="admin" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
	
</beans:beans>     
