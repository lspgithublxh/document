1.这是一种无应用层协议编程。
  1)服务端先启动：
	同时启动读写分离的线程（分别绑定接收到的一个客户端的socket的输入输出流），读线程和写线程都是无限循环，写线程是等待console之类的客户端输入,读线程则一直轮询InputStream。
	
  2）客户端后启动：
  	同时启动读写分离的线程（分别绑定接socket的输入输出流）,
 

2.读写分离问题
  1)如何读？
  2)如何写？
  3)如何并行进行？
  4)如何切换进行？


3.socket与输入流，输出流。。。
	一直都是使用的同一个。
	是否可以缓存？即没有及时读取，是否等会儿读也没问题？
	


4.socket模拟http编程
   1)客户端：三次握手
   2)服务端：三次握手，拒绝客户端、返回客户端都要封装正确的信息，目的是让客户端能懂情况（最简单明了地懂）。

 -----本质即模拟http服务器（如tomcat），http客户端（如浏览器chrome）


5.socket传图片
    流的读取而存储。关键是对流的认识。将网络流先放到内存数组流里，ByteOutputStream里，然后再将内存流输出到byte[]里，这样可以为Base64加密提供数据。
    --内存流就是一个无限宽的数组（不定宽的）。所以可以不断append 比如byte[]数据，最后取出总共的比如byte[]。。。