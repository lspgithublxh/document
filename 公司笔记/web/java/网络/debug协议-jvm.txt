1.JVM TI（功能和访问接口）
 （关键功能：jvm暂停执行、继续执行，非常好控制，，控制执行这种功能）
  要远程debug，那么客户端通过端口访问到jvm进程（jvm在这个专为debug设置的端口）的时候，传来的信息是命令，
   而程序本身内部加的debug断点也会在class文件中相应位置标记信息，然后从首行代码开始逐行运行--------这是jvm支持的关键能力，就是逐行检查断点而暂停执行--继续执行，并且读取当时的变量数据情况，返回代码位置和相应变量信息到客户端，客户端根据这些信息在源代码文件的eclispe视图中标记、可视化显示。
---------这是本地语言实现的（C语言）；	

2.JDI （是一个jpda前端，是调试器调用的对象）
  调用JVM TI接口的实现另一部分高级逻辑的java api，这部分api还要和客户端打交道，即客户端和JDI通信。
 
3.***（JPDA后端，是和前端通信的对象）  
  
4.JDWP
  这是一个协议，是对debug客户端和服务端通信格式内容在二进制形态时的要求（即调试器发送给JVM的消息，和JVM发送给调试器的调试信息，这两部分信息的二进制格式）。
  一般在8000端口听和发。（如果是本地听----即没有配置远程debug---仅仅是同一个jvm上发和听，是用netstat -ano看不到的。这个只是本地调试，不是远程调试。）
  
5.jdk对debug的实现：远程传送命令、命令控制执行、即时返回结果。



6.其实jvm既可以作为客户端（发命令）也可以作为服务端（听命令）。
-Xdebug -Xrunjdwp:transport=dt_socket, address=8000,server=y,suspend=y

  
7.协议内容：
  建立传输层链接，后客户端先发送：JDWP-Handshake， 服务端返回原样的：JDWP-Handshake
  
  
  

