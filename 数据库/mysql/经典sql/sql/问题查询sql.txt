----------------------------------------------------------------------推荐----------------------
-- 查询推荐系统对一个用户的所有的推荐的问题和知识点
SELECT * FROM study_unit su INNER JOIN study_unit_package sp ON sp.`study_unit_package_id`= su.study_unit_package_id
WHERE sp.user_id=1893 AND sp.exam_subject_id=10


-- 查询推荐的问题(根据推荐的知识点)
SELECT  DISTINCT k.question_id, k.knowledge_point_id FROM knowledge_point_relate_question_detail k 
INNER JOIN question q ON k.question_id = q.question_id WHERE 1= 1 
 AND q.purpose IN ('Z','L')  AND q.has_analyze = 1 AND q.status=1 
AND k.knowledge_point_id IN (18701, 18496, 18836, 18953, 18813)

-- 查询推荐的知识点(综合)

--------------------------------------------------------产品---------订单---------权限-------

-- 查询产品对应的各科
SELECT pr.`product_id`, p.`end_time`, r.`reference_id`, es.name FROM `group_resource_authority` g INNER JOIN resource r ON r.resource_id = g.resource_id 
INNER JOIN product_resource pr ON (pr.`resource_ids` REGEXP CONCAT('^(.+,)?',CONCAT(g.`resource_group_id`, '(,.+)?$')))
INNER JOIN product p ON p.`product_id` = pr.`product_id`
INNER JOIN `exam_subject` es ON es.`exam_subject_id` = r.`reference_id` 

-- 查询每个用户购买了的赋权了的产品-科目
SELECT DISTINCT pr.product_id, ur.user_id, es.exam_subject_id, es.name FROM user_resourcegroup ur  INNER JOIN group_resource_authority gr ON ur.resource_group_id=gr.resource_group_id 
INNER JOIN resource r ON r.resource_id = gr.resource_id 
INNER JOIN product_resource pr ON (pr.`resource_ids` REGEXP CONCAT('^(.+,)?',CONCAT(gr.`resource_group_id`, '(,.+)?$')))
INNER JOIN product p ON p.`product_id` = pr.`product_id`

INNER JOIN `exam_subject` es ON es.`exam_subject_id` = r.`reference_id` 


-- 查询每个科目购买的用户数
SELECT  COUNT(DISTINCT ur.user_id), es.exam_subject_id FROM user_resourcegroup ur  INNER JOIN group_resource_authority gr ON ur.resource_group_id=gr.resource_group_id 
INNER JOIN resource r ON r.resource_id = gr.resource_id 
INNER JOIN product_resource pr ON (pr.`resource_ids` REGEXP CONCAT('^(.+,)?',CONCAT(gr.`resource_group_id`, '(,.+)?$')))
INNER JOIN product p ON p.`product_id` = pr.`product_id`

INNER JOIN `exam_subject` es ON es.`exam_subject_id` = r.`reference_id` 
GROUP BY es.exam_subject_id


-- 非客服方式的各个产品购买量
SELECT sc.product_id, COUNT(DISTINCT po.user_id) FROM product_order po 
INNER JOIN shopping_cart sc ON po.shopping_cart_id=sc.shopping_cart_id	

WHERE po.order_status=5
GROUP BY sc.product_id

-- 通过权限 猜测用户购买的产品
select product_id from product_resource where product_id not in(
select product_id from( 
select b.product_id, b.rgid, ur.resource_group_id,ur.`user_id`  from (select pr.product_id, substring_index(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) as rgid,pr.resource_ids from product_resource pr inner join exam_subject es on es.exam_subject_id <= length(pr.resource_ids) - length(replace(pr.resource_ids, ',','')) + 1
) b left join user_resourcegroup ur on (b.rgid=ur.resource_group_id and ur.`user_id`=2318)
) c where c.resource_group_id is null
)


-- 查询某个用户的客服方式购买的产品
SELECT po.user_id, sc.product_id FROM product_order po 
INNER JOIN shopping_cart sc ON (po.shopping_cart_id=sc.shopping_cart_id AND po.payment_mode='CUSTOMSERVICE')
INNER JOIN product_resource p2 ON p2.product_id = sc.product_id
WHERE
NOT EXISTS(
SELECT product_id FROM (
SELECT b.product_id, b.rgid, ur.resource_group_id,ur.`user_id`  
FROM (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS rgid,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
) b LEFT JOIN user_resourcegroup ur ON (b.rgid=ur.resource_group_id AND ur.`user_id`=2318) -- AND ur.`user_id`=2318
) c WHERE c.user_id IS NULL AND p2.product_id = c.product_id
)

- 从权限表查询每个用户购买的产品数
SELECT user_id, COUNT(DISTINCT product_id) FROM(
SELECT product_id, user_id FROM (
SELECT a.*,b.product_id AS pid,a.auth_count - b.auth_count AS com FROM 
 (SELECT p.product_id, ur.user_id, COUNT(DISTINCT p.resource_group_id) auth_count FROM user_resourcegroup ur  
 RIGHT JOIN  (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
) p ON p.resource_group_id = ur.resource_group_id 
 GROUP BY p.product_id, ur.user_id)a
 LEFT JOIN 
( SELECT p.product_id,COUNT(DISTINCT p.resource_group_id) auth_count FROM (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
)  p
 GROUP BY p.product_id)b
 ON a.product_id=b.product_id
)c WHERE com =0
) d GROUP BY user_id

-- 从权限表猜测每个用户购买的产品，
 SELECT user_id, COUNT(DISTINCT product_id), GROUP_CONCAT(product_id ORDER BY product_id SEPARATOR ',') pids, GROUP_CONCAT(product_name ORDER BY product_name SEPARATOR ',') pnames FROM(
SELECT c.product_id, user_id, p.`product_name` FROM (
SELECT a.*,b.product_id AS pid,a.auth_count - b.auth_count AS com FROM 
 (SELECT p.product_id, ur.user_id, COUNT(DISTINCT p.resource_group_id) auth_count FROM user_resourcegroup ur  
 RIGHT JOIN  (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
) p ON p.resource_group_id = ur.resource_group_id 
 GROUP BY p.product_id, ur.user_id)a
 LEFT JOIN 
( SELECT p.product_id,COUNT(DISTINCT p.resource_group_id) auth_count FROM (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
)  p
 GROUP BY p.product_id)b
 ON a.product_id=b.product_id
)c 
inner join product p on c.product_id=p.`product_id`
WHERE com =0
) d GROUP BY user_id

-- 从权限表猜测每个产品购买的用户：
 SELECT product_id, COUNT(DISTINCT  user_id), GROUP_CONCAT(user_id ORDER BY user_id SEPARATOR ',') uids, GROUP_CONCAT(mobile_phone ORDER BY mobile_phone SEPARATOR ',') unames FROM(
SELECT c.product_id, u.user_id, u.`mobile_phone` FROM (
SELECT a.*,b.product_id AS pid,a.auth_count - b.auth_count AS com FROM 
 (SELECT p.product_id, ur.user_id, COUNT(DISTINCT p.resource_group_id) auth_count FROM user_resourcegroup ur  
 RIGHT JOIN  (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
) p ON p.resource_group_id = ur.resource_group_id 
 GROUP BY p.product_id, ur.user_id)a
 LEFT JOIN 
( SELECT p.product_id,COUNT(DISTINCT p.resource_group_id) auth_count FROM (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
)  p
 GROUP BY p.product_id)b
 ON a.product_id=b.product_id
)c 
INNER JOIN USER u ON c.user_id=u.`user_id`
WHERE com =0
) d GROUP BY product_id

----------------------------------------------------------------------------学习/讲练解
-- 某个科目-的知识量-所有板块id--开启条件0.5  `study_goal_for_exam_subject`
-- 某个一级知识点-知识量：`study_goal_for_knowledge_point`

-- 某个板块-的知识量-的全部一级知识点`study_goal_for_section`
-- 某个用户-的某个科目的：是否完成画像题、解锁包的数量、学习了的知识量、学习的时长、上次选择本科目的时间 `study_progress_on_exam_subject`
	-- (进度id)

-- 某个进度id(即某个用户-的某个科目)-的某个一级知识点： 学习时长、正在学习的unit_package_id、学习了的知识量、该一级知识点的学习是否完成	`study_progress_on_knowledge_point`
-- 某个进度id(即某个用户-的某个科目)-的某个板块id：学习时长、正在学习的unit_package_id、学习了的知识量、是否开启、是否完成 `study_progress_on_section`

-- 某个用户-的某个考试类型-的学习状态：一阶段(是否注册)/二阶段(是否开启)/画像题(是否开启)、上次修改时间 `study_state`
	-- 学习状态id
-- 某个学习状态id: 老状态、新状态、改变原因(初始化、注册、画像题之后、体验课之后、推新题之后、)、改变时间。`study_state_change_history`

-- 某个学习包unit_package_id-的某个学习单元study_unit：学习的内容(5个知识点/推荐的问题/问题的答案/问题的解析)、开始时间、结束时间、学习时长、单元学习是否完成、是否是内容为null的单元`study_unit`

-- 某个考试类型-的讲/练/答/解的：顺序、是否可以重入 `study_unit_config`

-- 某个知识点的：内容图片、可用状态`study_unit_overview`
-- 某个用户-的某个科目-的某个学习包unit_package_id: 当前正在学习的学习单元study_unit, package是否完成、若干个一级知识点、所有末级知识点、板块id   `study_unit_package`
----------------------------------------------具体应用：

-- 应用1：查看每个用户 的每个科目 的每个板块 的每轮学习(一轮一个unit_package_id, 4个学习单元) ：各个学习单元的学习时长、开始结束时间、单元学习是否完成、package是否完成、正在学习的单元

select sup.user_id, sup.exam_subject_id,sup.study_unit_package_id, sup.active_study_unit_id, sup.finish as package_finish,study_unit_id, start_time, end_time,su.finish as finish from `study_unit_package` sup inner join study_unit su on sup.study_unit_package_id=su.study_unit_package_id

-- 应用2：查看每个用户 的每个科目 的每个板块 的：学习时长、正在学习的unit_package_id、学习了的知识量、是否开启、是否完成、package是否完成、

select sup.user_id, sup.exam_subject_id,sup.section_id,sup.study_unit_package_id, sup.active_study_unit_id, sup.finish as package_finish,
	spos.study_progress_id, spos.learned_knowledge_amount,spos.study_duration, spos.open, spos.finish, spos.active_study_unit_package_id
from `study_unit_package` sup inner join study_progress_on_section spos on sup.section_id=spos.section_id

-- 应用3：查看每个用户整个科目的进度情况: 学习了的知识量、知识总量、。。。
SELECT sup.user_id, sup.exam_subject_id,sup.section_id, spos.study_goal_for_section_id,sup.study_unit_package_id, sup.active_study_unit_id, sup.finish AS package_finish,
	spos.study_progress_id, spos.learned_knowledge_amount,spos.study_duration, spos.open, spos.finish, spos.active_study_unit_package_id,
	'-', spoes.finish_portrait_question, spoes.free_package_count,spoes.last_selected_time,spoes.learned_knowledge_amount, spoes.study_duration,
	'-', sgfes.knowledge_amount, sgfes.study_goal_for_section_ids, sgfes.max_free_package_num, sgfes.open_condition,sgfes.open_time_str
FROM `study_unit_package` sup INNER JOIN study_progress_on_section spos ON sup.section_id=spos.section_id
inner join study_progress_on_exam_subject spoes on spoes.study_progress_id = spos.study_progress_id
inner join study_goal_for_exam_subject sgfes on sgfes.exam_subject_id = sup.exam_subject_id

-- 应用4：查看每个用户 的每个科目 的每个板块 的：学习时长、正在学习的unit_package_id、学习了的知识量、是否开启、是否完成、package是否完成、板块的解锁包情况
SELECT sup.user_id, sup.exam_subject_id,sup.section_id,sup.study_unit_package_id, sup.active_study_unit_id, sup.finish AS package_finish,
	spos.study_progress_id, spos.learned_knowledge_amount,spos.study_duration, spos.open, spos.finish, spos.active_study_unit_package_id,
	'-',spoes.free_package_count,spoes.last_selected_time,spoes.learned_knowledge_amount, spoes.study_duration
FROM `study_unit_package` sup INNER JOIN study_progress_on_section spos ON sup.section_id=spos.section_id
INNER JOIN study_progress_on_exam_subject spoes ON spoes.study_progress_id = spos.study_progress_id

--应用5： 每个板块学习的总轮数，最大板块id--当前板块id、最大package_id和最大study_id----即当前正在学习。
	-- 学习了的知识量、学习周期、	
	-- 总知识量、所在科目的开启条件-板块id
SELECT sup.user_id, sup.exam_subject_id,sup.section_id, max(sgfs.study_goal_for_section_id) study_goal_for_section_id,count(1) as learned_unit_package_count, max(sup.study_unit_package_id) as curr_package, max(sup.active_study_unit_id) curr_study_unit, min(sup.finish) AS package_finish,
	max(spos.study_progress_id) study_progress_id, max(spos.learned_knowledge_amount) as learned_knowledge_amount,max(spos.study_duration) as study_duration, min(spos.open) section_open, min(spos.finish) section_finish,
	max(sgfs.knowledge_amount) total_knowledge_amount, max(sgfs.first_level_knowledge_point_ids) first_level_knowledge_point_ids, max(sgfes.knowledge_amount) subject_knowledge_amount, max(sgfes.study_goal_for_section_ids) study_goal_for_section_ids, max(sgfes.open_time_str) open_time_str
FROM `study_unit_package` sup INNER JOIN study_progress_on_section spos ON sup.section_id=spos.section_id
inner join study_goal_for_section sgfs on sgfs.study_goal_for_section_id=spos.study_goal_for_section_id
inner join `study_goal_for_exam_subject` sgfes on sgfes.exam_subject_id = sup.exam_subject_id
where sup.user_id=156	
group by sup.user_id,exam_subject_id,sup.section_id

------------------------------------------------------------------------


-- 开权限：
-- 初快
UPDATE user_resourcegroup SET authorized=0 WHERE user_id IN (
SELECT user_id FROM USER WHERE mobile_phone IN ('18243259789'
) AND resource_group_id IN (25,26,27,28))

-- 初会
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','25','2020-02-08 18:32:34','2021-03-20 00:00:00','1');
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','26','2020-02-08 18:32:34','2021-03-20 00:00:00','1');
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','27','2020-02-08 18:32:34','2021-03-20 00:00:00','1');
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','28','2020-02-08 18:32:34','2021-03-20 00:00:00','1');



-- 消防
UPDATE user_resourcegroup SET authorized=0 WHERE user_id IN (
SELECT user_id FROM USER WHERE mobile_phone IN ('13683586150'
) AND resource_group_id IN (10,11,13,14))

-- 消防
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','10','2020-02-08 18:32:34','2021-03-20 00:00:00','1');
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','11','2020-02-08 18:32:34','2021-03-20 00:00:00','1');
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','13','2020-02-08 18:32:34','2021-03-20 00:00:00','1');
INSERT INTO `user_resourcegroup` (`user_id`, `resource_group_id`, `insert_time`, `end_time`, `authorized`) VALUES('4248','14','2020-02-08 18:32:34','2021-03-20 00:00:00','1');


-- 多字段批量更新：
update product_quota_num p inner join ( 
 SELECT product_id, COUNT(DISTINCT  user_id) c FROM(
SELECT c.product_id, u.user_id, u.`mobile_phone` FROM (
SELECT a.*,b.product_id AS pid,a.auth_count - b.auth_count AS com FROM 
 (SELECT p.product_id, ur.user_id, COUNT(DISTINCT p.resource_group_id) auth_count FROM user_resourcegroup ur  
 RIGHT JOIN  (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
) p ON p.resource_group_id = ur.resource_group_id 
 GROUP BY p.product_id, ur.user_id)a
 LEFT JOIN 
( SELECT p.product_id,COUNT(DISTINCT p.resource_group_id) auth_count FROM (SELECT pr.product_id, SUBSTRING_INDEX(SUBSTRING_INDEX(pr.resource_ids, ',', es.exam_subject_id), ',', -1) AS resource_group_id,pr.resource_ids FROM product_resource pr INNER JOIN exam_subject es ON es.exam_subject_id <= LENGTH(pr.resource_ids) - LENGTH(REPLACE(pr.resource_ids, ',','')) + 1
)  p
 GROUP BY p.product_id)b
 ON a.product_id=b.product_id
)c 
inner join user u on c.user_id=u.`user_id`
WHERE com =0
) d GROUP BY product_id
) m on p.product_id=m.product_id 
set p.show_apply_num=p.show_apply_num + m.c


-- 统一的日期运算问题：时间戳用unix_timestamp来计算整数
SHOW GLOBAL VARIABLES;
SET GLOBAL event_scheduler = ON;
DROP EVENT IF EXISTS update_register_page_expire_time;
CREATE EVENT update_register_page_expire_time ON SCHEDULE EVERY 1 DAY STARTS DATE_ADD(CURDATE() + 1, INTERVAL 1 SECOND)  
DO UPDATE register_page SET expire_time=DATE_ADD(DATE_ADD(DATE_ADD(DATE_ADD(CURDATE(), INTERVAL 1 DAY), INTERVAL 23 HOUR), INTERVAL 59 MINUTE), INTERVAL 59 SECOND)

	
SELECT DATE_ADD(DATE_ADD(CURDATE(), INTERVAL 24 DAY), INTERVAL 2 HOUR) FROM DUAL;

-- 问题常见：
1.订单回调接口到了另一个项目，没有看到日志。