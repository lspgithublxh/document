1.问题：
	>创建索引：（表一列值的索引）
		>是否有必要创建：即值是否复杂
		>索引空间有多大：可以对字符串的前面部分或者后面部分进行索引，而不是对整体：因为整体可能前面有相同或者后面有相同。
		>索引高速缓存中的块：
		>索引对写的影响：降低写操作性能，因为会额外的花时间来更新索引，而且索引占用磁盘空间。对update/insert就耗时--因为重建-更新索引。
		>索引对mysql生成一个执行计划的影响：会考虑索引进来。
		>何时不需要索引：当已经有多列索引了--他的最左索引如果是将想加的索引，那么就不用加了。
		>索引在查询时使用：> < between 和like 直接量的时候，会进行。
		>索引的创建：primary key ; unique ;index; fulltext
		>何时不走索引：mysql内部预估返回的数量超过一定比例，就不走索引一条一条地去找数据，而是全表扫描。
				或者对索引列计算
				<> !=不等于比较不会走索引
		>对哪些列加索引：order by列可以加索引
	
	>行锁的创建：InnoDB通过检索条件检索数据---会使用行锁：一般是使用表锁
		MyISAM:使用场景：无事务支持、并发低、数据修改少（OLAP应用和ETL应用）
			缓存区缓存索引--而不缓存数据
					
	>字段的默认值：最好不要为NULL。这反而增加了IO。

	>表设计规范：
		>用整数，就不用string,如ipv4
		>用Date,就不用timestamp,datetime，但是不用Int,string
		>定长用char,不定长采用varchar。小于64k的文本，用varchar而不用text
		>用''或者‘0’替换NULL，因为这个NULL也会占用空间，而且对索引效率有影响
		>

	>Explain执行计划：除了可以看到各部分的执行时间外，可以看到是否使用了索引