1.问题描述：
	>预知：
		>DTD:
		>Schema:
		>名称空间：方便spring解析-提取信息，并避免随便定义标签、属性、结构。

	>概念：
		>RPC远程服务调用方案:
		>基于长链接的NIO框架抽象封装：
		>失败容错：
		>服务消费方动态查找服务提供方：注册中心目录服务，不用写死服务提供方地址----注册中心会根据接口名查找到
		>无API侵入：
		>dubbo服务过程：
			>提供方服务容器启动、注册：
			>消费方订阅、接收服务地址（获取或者推送一个服务列表）：
			>消费方反射调用-远程调用提供方服务：软负载均衡算法，一个服务调用不通，调用另一个服务提供者---或者服务提供者有多个节点可以在多个节点之间切换
			>消费方和服务方统计调用次数和时间--定时推送到统计数据中心：
		>服务架构的演变：
			>ORM：服务全部在一个节点。单一架构。
				重点在简化增删改查开发的ORM
			>MVC: 服务分模块分层：在不同节点上，子节点上。但子节点之间不互相通信。所以叫垂直架构。（代码冗余，相同逻辑代码不复用）
				重点在简化前端页面的开发的MVC
			>RPC: 服务模块所在的子节点之间可以相互通信，互相调用了，从而共享服务。但多个服务中心，服务多了之后，要和大量的节点通信，开发复杂调整不便维护不便。
				重点在提供业务复用和整合的RPC
			>SOA：服务转发中心建立，需要调用服务直接像服务转发调度中心请求即可，调度中心负责路由和匹配。开发更容易--且不为服务方崩溃而无可奈何或者难于重新找，或者服务方调整了而没有即时通知--互相之间其实很盲目没有管理。需要一个管理中心。
				重点在提高机器利用率实现资源调度的SOA

		>
	
	>使用：
		>服务方：启动下载的注册中心服务、在项目里spring配置文件里引用Schema名称空间：配置相应参数
			----甚至不用新写代码就将一个接口发布到dubbo而成为一个服务，可以被许多方调用。
		>消费方：spring配置服务方服务完整接口名和zookeeper注册中心
			---程序里依赖服务方接口
				
		>本地使用：可以用zookeeper作为本地的注册中心。在本地注册。

----说明：
   zookeeper作为注册中心，在server启动时候，它会报错，是正常的，服务仍然可以调用。即依然可以为server和client创建回话。



1.参考资料：
1.http://www.cnblogs.com/Javame/p/3632473.html（完整使用实例，从服务方到消费方，全spring配置和启动和查看）
2.http://dubbo.io/官方参考资料
3.http://blog.csdn.net/noaman_wgs/article/details/70214612(dubbo产生的背景和使用)
4.http://www.tuicool.com/articles/QjaArm（高手完整使用dubbo）
5.http://shiyanjun.cn/archives/325.html(dubbo架构详细解)
6.https://github.com/alibaba/dubbo(dubbo-admin下载)
7.http://doc.okbase.net/congcong68/archive/112508.html（并不认同的放在web中的方式）
8.http://blog.csdn.net/xlgen157387/article/details/51865289（写得比较好的dubbo,更全面细致）