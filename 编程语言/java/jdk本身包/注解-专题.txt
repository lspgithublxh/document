1.问题：
	>注解的定义：
		>注解的定义和使用：
			>元注解：注解说明注解的注解（不是用来注解类或方法属性之类的注解）--系统提供的注解：@Target @Retention @Documented @Inhireted
			>注解处理器：通过反射获取注解的属性值
			>注解和一般java代码的关系：在编译时、在运行时：
			>注解的属性：
				>抽象方法-- 可以定义默认返回值
			>注解的看作:
				>一般程序的外层判断逻辑。外层数据库。是一个处理注解类的处理器会读取那些注解来辅助处理(辅助判断，甚至判断根据，决定根据，处理根据)。
				>
			>声明一个注解：@interface    标记了这个的注解，编译时会自动继承java.lang.annotation.Annotation这个接口。。但是咋字节码中的类型还是@Interface
			>使用自定义的注解来标记：@注解名(方法名=值)	
				>值可以是数组{a,b}
				>
			>在一般的程序中使用注解：获取到注解的值。比如获取到一个类上的注解，获取到一个方法或者属性上的注解---而不是仅仅编译器或者虚拟机获取到。
				>获取方法：反射：
		>形象入手：使用：
			>定义一个接口A，并实现它B
			>使用关键字@interface：像interface一样。标明是一个注解型接口。
				>可以对这个注解增加注解：@Target(本注解允许加到方法上或者类上)	
							 @Retention(本注解何时有效：运行时)（是否不被编译器、或者虚拟机忽略。。源文件肯定会保留---但是被编译器忽略就没有啥意义）
							 @Documented文档型注解，标记式注解---方便生成doc文档。没有属性。
							 @Interceptor(拦截器的实现类，本注解的拦截器)
		>
	>注解的本质：
	>关于注解的几种认识-观点：
	>注解的使用：