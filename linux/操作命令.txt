1.问题：
	>文件操作：
		>文件查找：find -type d -name "dirname"  当前目录中找目录
			   find / -type d -name "dirname" 系统中找目录
			   find / -type f -name "filename" 系统中找文件
			   find / -type f -name "*prosser*" 2>&1 | grep -v  "Permission"  重定向并且不显示有Permission的即没有权限的告警输出。
		>文件内容搜索：find . -name "*.conf" | xargs grep -in "10.8.8.119"    当前文件夹：.  其他文件夹/  文件类型".conf" 文件内容"10.8.8.119"
				find . | xargs grep -in "appfang.58.com" 当前目录下的所有文件中搜索 包含有"appfang.58.com"的内容---体现出文件和在文件中的位置。
				find /opt/web/hbg_api_miniapp/conf/ -type f -name "*server*" | xargs grep "GlobalNamingResources" 指定目录搜索指定内容 -in可以不要。但xargs必须要。
				find ./* -type f -name "*.log" | xargs grep -in "井冈山" 任意目录下匹配也可以。
		>彻底删除目录：单步直接全部删除不对话：rm -rf  dir
				有对话-一一确认：rm -r dir 
		>文件内容搜索匹配：grep 'abc' abc.log
			>搜索到的内容导出到文件：grep "stat" hbg_web_aroundweb.log > abc.log
			>上下文查看 ：grep -C 5 "InfoHelper" catalina.out  -B -A也可以。
			>特殊符号查看：grep -m 10 "_price_ranges\":\[{\"" ajkhouse.log
			>匹配次数查看：grep -c "TimeoutException" ajkhouse.log
			>正则匹配：egrep -m 10 "wholeSave houseId,.+?, status\:0" catalina.out  正则匹配，命令不同，参数基本相同。数字需要使用[0-9]
			>只输出匹配到的内容而不是完整行：egrep -m 10 -o  "更新失败\：error\s+num\:[0-9]*" catalina.out 
			>分割输出指定列：awk -F'[ ,]' '{print $1,$2,$5}' log.txt
			>正则行匹配：awk '/re/' log.txt包含有re的行
			>awk匹配文件运行：awk -f a.awk log.txt
			>正则匹配并提取：egrep -m 10 "结果" catalina.out |  awk '{match($0,/.+结果([0-9]+), cityId(.+)/,a);print a[1], a[2]}'
				>sed提取：sed 's/.*\(ip"[^,]*,\).*/\1/'
			>列式统计：见awk文件。先用egrep .. | awk提取获取生成列式文件，后用awk ...运行统计awk脚本文件。
		>文件上传到linux: rz filename
			或者直接拖文件到secureCRT 客户端页面选择z model			
		>文件下载到本地：sz filename	
		>当前文件夹大小：du -sh	
		>文件打包解压：tar -zcvf hugwidejob.tar.gz ./hbg_scf_hugwidebizjob/*
			  tar -xzvf hugwidejob.tar.gz
		>文件清空：>text.txt重定向的原理。	
		>文件显示10个：ls | head -n 10
		>系统磁盘空间及其使用率：df -hl
		>管道命令：wc grep sort
		   >文件里的行数、字数、字符数：wc -l filename  wc filename
		   >统计目录下文件个数：ls -al | grep "^-" | wc
		   >统计目录下目录个数：ls -al | grep "^d" | wc
	>系统操作：uname -a 系统名称
		>pwd:当前路径
		>cpu信息查看：cat /proc/cpuinfo会显示逻辑cpu和物理cpu
				>cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l只看物理cpu
		>内存查看：free -g 显示是G为单位。


		
	>网络操作：
		>curl -l -H "Content-type: application/json" -X POST -d '{"type":4, "district_param":[{"district_id":1146}]}' http://panshi.a.ajkdns.com/panshi-cities/district-service?method=getDistrictInfoByDistrictIds
		>curl -l -H "Content-type: application/json" -X POST -d '{"school_ids":[115427]}' http://panshi.a.ajkdns.com/panshi-cities/school-info-service?method=getSchoolListBySchoolId
		>多报头：可以从charles里考出来curl requests选项。curl -H 'a:b' -H 'c:d'   比如这个：curl -H ':method: GET' -H ':path: /api/list/ershoufang?action=getAnxuanFilters' -H ':authority: appfang.58.com' -H ':scheme: https' -H 'lon: 116.511391' -H 'osv: 6.0' -H 'id58: 98665451376082' -H 'rimei: 861498039727957' -H 'totalsize: 11' -H 'maptype: 2' -H 'bundle: com.wuba' -H 'imei: 861498039727957' -H 'dirname: bj' -H 'bangbangid: 1080866410612465910' -H 'version: 8.12.0' -H 'productorid: 1' -H 'osarch: arm64-v8a' -H 'nettype: wifi' -H '58ua: 58app' -H 'uniqueid: 9754f1ca7f325ca6055cb6caba85624c' -H 'apn: WIFI' -H 'apkbus: ' -H 'xxzlsid: 8BaX8k-VwW-MIg-Q8b-284LtVkzb' -H 'androidid: 395e7a319d9aa8f1' -H 'cid: 1' -H 'm: A8:C8:3A:0D:D4:50' -H 'deviceid: 395e7a319d9aa8f1' -H 'owner: baidu' -H 'ltext: %E5%A4%A7%E5%B1%B1%E5%AD%90' -H 'os: android' -H 'rnsoerror: 0' -H 'nop: 4150239883787' -H 'currentcid: 1' -H 'platform: android' -H 'ua: NCE-AL10' -H 'uid: 35667656346895' -H 'channelid: 58585858' -H 'r: 1208_720' -H 'lat: 39.993806'  'https://appfang.58.com/api/list/ershoufang?action=getAnxuanFilters'
			又比如：curl -H 'imei: 861498039727957' -H 'dirname: bj'  -H 'version: 8.12.0' -H 'cid: 1'  -H 'os: android' -H 'uid: 35667656346895' 'https://appfang.58.com/api/list/ershoufang?action=getAnxuanFilters'
				curl -H ':method: GET' -H 'lon: 116.511378' -H 'id58: 98732770446857' -H 'rimei: 861498039727957' -H 'imei: 861498039727957' -H 'dirname: bj' -H 'version: 8.12.0' -H 'productorid: 1' -H 'nettype: wifi' -H 'cid: 1' -H 'deviceid: 395e7a319d9aa8f1' -H 'owner: baidu' -H 'os: android' -H 'currentcid: 1' -H 'platform: android' -H 'location: 1,1142,7551' -H 'uid: 35667656346895' -H 'channelid: 58585858' -H 'lat: 39.993829'  'https://appfang.58.com/api/list/ershoufang?tabkey=allcity&action=getListInfo&signature=c1d792cdf241ac9412a4264a67cea7fc&curVer=8.12.0&appId=1&localname=bj&os=android&format=json&geotype=baidu&v=1&ts=1542699614319&location=1%2C1142%2C7551&filterParams=%7B%7D&sidDict=%7B%22GTID%22%3A%22167293312202204723760992853%22%2C%22PGTID%22%3A%22189593566202204723764000342%22%7D&page=2&geoia=39.993829%2C116.511378' > llxxx.txt
	>连接操作：将windows下的.ssh/isa.pub里的内容放到linux下的.ssh/autorized_keys里面，然后配置sshd_config, PasswordAuthentication no  PubkeyAuthentication yes然后重启生效：systemctl restart sshd

	>线程操作：
		>一个进程的线程数：cat /proc/pid/status
		>一个进程的线程数：ps -hH 17695 | wc
	>进程操作：
		>查看进程详细信息：ps -ef|grep java
		>查看最大进程数：sysctl kernel.pid_max
		>查看运行中进程数：ps -eLf | wc -l
	>jvm查看命令：top  jmap最常用最有价值。
		>查找最耗cpu的线程和代码：
			>ps -ef|grep "应用名关键字"  jps也可以。
			>top -Hp pid  线程总数、活跃数、休眠数、停止数，得到最顶层的pid， 比如pid1。。
					2000个总数就算多的了，而静态没访问最多应该只有200左右。
					且线程总量不会降低下来----就算没有任务了没有请求量了。
			>printf "%x\n"  pid1 得到16进制数me
			>jstack pid1 | grep me   匹配出nid是 me的线程。

		>mem内存实例的情况：jvm
			>jmap pid
			>jmap -histo:live pid  查看各个类的实例的个数， 占用空间的总共大小
				>jmap -histo pid | sort -n -r -k 2 | head -10  查看实例最多的10个类	
				>jmap -histo pid | sort -n -r -k 3 | head -10  查看实例占用空间最多的10个类  [B [C [I  分别是byte char int的数组   [J是Long型 [Z是boolean型   ConstMethodKlass代表静态方法的字节码太多了---可能动态生成和反射使用多了。methodKlass表示实例方法字节码多了，constantPoolKlass表示类代码多了。都在Perm区域。。<instanceKlassKlass>也是。
			>jmap -heap 823   查看jvm各代空间大小和使用百分比、使用和空闲情况。

		>gc情况：
			>jstat -class pid
			>jstat -gc pid
			>jstat -gcutil pid最常用。可以查看 YGCT * 1000 / YGC来看年轻代平均回收一次用了多少ms ：<50ms无需  。以及 FGCT * 1000 / FGC 看年老代平均回收一次回收用了多少时间。 
			>jstat -gcutil 961 1s 更常用，是直接的动态输出。
				>年轻代回收频率：看jconsole  >10s一次都ok
				>年老代回收频率：看jconsole >10min一次都ok
			>远程jstat: 通过visual vm方式：
				>
		>线程情况：
			>jstack -l pid 线程的状态(三种状态)
			>ps -hH pid | wc -l 进程中线程的总数
		>手动清理内存: free -m //这个还需要进一步考虑。
			
		>jhat:强大工具：对象查询的基础
			>创建dump文件：jmap -dump:live,file=a.log pid
			>分析dump文件而启动专门服务器:jhat -J-Xmx512M a.log    在远程机器上访问也可以。
			>访问server在页面上看结果：http://10.8.12.185:7000/
				>查看：所有类、所有可以引用到的对象、所有实例的个数----平台的或者不是平台的-----点击甚至可以查看到所有的实例：每个都一一列出来：比如字符串；；以及每个对象的内存地址和引用它的对象和它的值和成员值：：神奇!。
				>实例的个数、大小统计。
				>对象查询：string, array, map也可以查看显示值--比如想看tokenServe中缓存map中的token的值， 也可以显示一个类的实例成员和静态成员	
				   >筛选数组长度达标的：select a from [I a where a.length >= 256
				   >筛选字符串长度达标的：select s from java.lang.String s where s.value.length >= 100
				   >筛选正则匹配到的字符串： select s.value.toString() from java.lang.String s where /java/.test(s.value.toString())
				   >查询所有的文件对象：select file.path.value.toString() from java.io.File file
				   >查询所有的加载器对象：select classof(cl).name     from instanceof java.lang.ClassLoader cl
				   >查询一个类的静态属性： select heap.findClass("java.lang.System").statics.props
								 select heap.findClass("com.bj58.fang.hugopenapi.sdk.TokenService.provider.TokenProvider").statics
				   >查询某个包下所有类： select filter(heap.classes(), "/com.bj58./.test(it.name)")
				   >显示多个查询结果：select { name: t.name? t.name.toString() : "null", thread: t } from instanceof java.lang.Thread t
				   >查询类属性：select s.areaName.toString() from com.bj58.fang.service.hughouselist.contract.entitys.data.ShangquanEntity  s where s.areaName = "包河"
				   >查询类的某整数\英文非中文的属性值的实例：select s from com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity  s where /20024/.test(s.id)
				   				select s.pinyin.toString() from com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity  s where /20024/.test(s.id)
								select {"pid":s.pid, "pinyin":s.pinyin.toString(), "name":s.name}  from com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity  s where /^916$/.test(s.pid)
								select {"pid":s.pid, "pinyin":s.pinyin.toString(), "name":s.name.value.length}  from com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity  s where /^916$/.test(s.pid)
				   			map方式查询： select map(heap.objects('com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity') ,       function (it) {          var res = '';          if(/^3165$/.test(it.pid)){           res += toHtml(it.pinyin.toString());           return res + "<br>";          }else{           return "";          }                 })  
							查询属性值为null的元素： select map(heap.objects('com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity') ,       function (it) {          var res = '';          if(it.id == 0){           res += toHtml(it.pinyin.toString());           return res + "<br>";          }else{           return "";          }                 }) 
							                            select {"pid":s.pid, "pinyin":s.pinyin.toString(), "name":s.name}  from com.bj58.fang.service.hughouselist.entity.ajk.SanwangLocalEntity  s where null == s.pinyin                                                                                                         
			>jviturvm:自带jhat可以处理分析！！		   
				>Btrace监控例子：
					/* BTrace Script Template */
					import com.sun.btrace.annotations.*;
					import static com.sun.btrace.BTraceUtils.*;

					@BTrace
					public class TracingScript {
						/* put your code here */
					@OnMethod(clazz = "com.bj58.fang.hugopenapi.sdk.TokenService.runnable.RequestHandler", method = "run", location = @Location(Kind.RETURN)) 
					public static void traceExecute(@ProbeClassName String name,@ProbeMethodName String method,@Duration long time){ 
					long durationTime = time/1000000;
					if(durationTime > 0){
					String output = strcat(name,".");
					output = strcat(output,method);
					output = strcat(output,"#");
					output = strcat(output,str(probeLine()));
					output = strcat(output,">>");
					output = strcat(output,str(durationTime));
					output = strcat(output,">>ThreadId:");
					output = strcat(output,str(threadId(currentThread())));
					println(output);
					}
					} 
					}
			>jconsole:检测死锁：

	>Redhat:
		>yum软件安装方式。ubantu上是apt-get

	>cpu-网络-内存：
		>dstat
		>vmstat
		>netstat
		>iostat	
		>iftop/iptraf
		>netstat/ss
		>awk
		>crontab
		>telnet
		>ps

2.定义：
	> | 是管道的意思，即前面的输出是后面命令的输入  ps -ef | grep "xx" 显然就是前面的输出是后面的grep命令的最后一个输入参数----文件对象。 同样 ps -ef|less -10也是文件翻页查看的意思。
	>
参考资料：
https://www.cnblogs.com/jing1617/p/6482598.html（find grep）
https://blog.csdn.net/jueshengtianya/article/details/46315033(jmap返回参数参考)
http://ldbjakyo.iteye.com/blog/759586(综合参考资料)
https://blog.csdn.net/zlzlei/article/details/46471627(参考jvm回收)