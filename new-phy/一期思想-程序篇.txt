1.问题：
	>预备：基本概念：
		>判断：
		>执行：
		>函数、方法：
		>事情：
	>架构思想：首次编程前定义分析设计骨架、容器和组织系统（标签、角色、关系、能力、事务、流程、规则、方法、目标的完善的对外提供稳定可靠可用的整体功能的组织系统）的思想方法。如微服务系统spring-boot,spring-cloud;如军事组织、党组织、政府组织。软件系统同样要有这样的严密组织系统。
		>避免后来拓展程序功能时无从下手的困境和大量修改的二次工作的精力耗费，而在首次编程时就自顶向下定义本程序的功能层次描述，并且一期实现各层次的若干哪些功能模块，二期三期以及未来出现全新情况而设计的全新功能的某种类别的模块与那时的系统如何关联、操作控制的骨架和容器。
		>系统架构：最优抽象设计 + 不断接近最优抽象设计的具体实现
			>自顶向下的功能描述：就是对系统整体到系统局部具体功能的描述。每一层是一个平面，而不是一个直线。每一个平面上，是利用组织元素流程元素和功能效果元素构造出一个逻辑处理结构---来参加相关竞比活动能达到活动规则限制下所允许的理论最佳效果。
			>明确了架构：才知道从0到100依次推进要做的事务是哪些。描述清楚了才开始开发，先为庙算而后求战。（功能职责模块描述）
				>事务：自顶向下逐层描述。每一层的描述就是一个阶段性的事务。到最底层的抽象描述都描述清楚下一层就是真实的具体实现之后，可以进行开发了。
			>架构的任务：事先建立：a.功能元素对象分类安放的网络相连的分布式容器（血液脉络关联，树干树枝关联）（容器内有功能区划分，像一套房子一样）。。比如web系统各功能类型类安放在不同包下。
					      b.事情处理的经层层分类转发控制器到最终具体处理系统，终系统根据事情描述化为具体参数功能调用的处理流程，交付给内部执行器，内部执行器照搬执行返回结果。比如web server后端项目处理一切http请求的使用各种职责器来描述的流程(职责器可以保证和具体实现无关，又能正好描述整个职责履行过程)。
			>架构层次的职责的描述：
				>在抽象自顶向下的系统描述体系中，属于第一第二层次（功能描述）：比如聊天软件系统：显示部分-分类转发处理模块-通信部分。。。这种描述属于架构描述中的组织描述，联系描述则是三部分之间的各种交互过程的共同特征中的流程过程上的特征。		     


	>算法设计：
		>关键因素：
			>a.数据结构：处理流程的入口参数、起点参数、起点场景
				>原因：这个世界存在大量的递归结构。
			>b.处理流程：抽象场景接口
				>原因：在时间轴上不同阶段、场景被处理而演变到一个个新的阶段，无数的阶段中经常周期性地出现相似的处理场景，而对这些处理流程进行抽象抽象出接口可以发现处理接口基本是一样的可以通用的（输入参数一样，返回参数一样，处理目的一样）（略微调整，基本一个方法可以在时间轴上不同阶段都被调用），。。从细胞到宇宙。。
				>要求：事务：明确精准定义每一个接口的场景功能：什么初始数据结构，什么处理目的-要得到什么处理结果。方便递归处理，抽象出更多的通用有精准的场景方法/接口，否则多余动作。
				>
		>算法设计的描述过程：即便是谋定后动，也要逐层描述。
			>方法1：自顶向下，先定义最抽象的顶层的处理接口（处理方法，处理函数），并定义本层接口应该做的事情---其中调用下一层的接口属于本层应该做的事情--但下一层才应该做的事情不是本层应该做的事情--所以本层不描述--本层接口也不实现只调用。
				>条件：数据结构模型已经清楚、处理目标已经清楚。
				>必要能力：从问题中总结出、抽象出、模拟建立数据结构、模拟数据结构，和处理目标。
				

	>设计模式：
		>在外部观察者看来：设计模式就是被调用者提供给调用者的服务模式，服务使用模式，服务使用方法。根据需求而响应的一种实现模式。比如模板模式、工厂模式、单例模式、观察者模式、责任链模式、命令行模式。
		>


	>设计原则：
		>在外部观察者看来，设计原则对是无论调用者，还是服务者，主要还是服务者，	接口定义、类定义、方法定义、属性定义、方法实现定义中的一般规范特征的预防大规模调整修改来扩展、预防扩展产生大量冗余动作冗余操作、预防意外错误操作的建议。。比如里氏代换法则、最少知道法则、依赖反转法则、开闭原则、接口隔离原则。接口编程、职责单一、暴露最终。
	
	>功能设计：
		>是设计实现某种功能：不只是算法设计，还有规则、约定。。但一种基本方法，就是通过所用工具的基本的功能元素--功能不同角色不同的若干元素、最根本的功能、最本质的功能、基本功能单元集合，进行向上搭建，而构建出模拟出设想的功能----只要设想的功能理论上可以用数据处理的整体思路来解决。
		>计算机是端，在观察者看来，端的功能就是数据处理，就是给定数据、建立数据，执行处理执行调用处理。。数据传输通过网络进行。


	>计算机：
		>强大之处：在外部观察者看来就是：
			>（函数内）执行具有三种流程控制特征 + （函数外部）执行中可以调用执行定义的函数
				>说明1：在观察者看来，即便只有一种特征：顺序执行，也能产生很强大的功能了。
				>说明2：在观察者看来，函数的引进，本质是引进新的一种流程控制---跳转，而且是带上数据的跳转；；从而把功能都规范化定义、封装了起来，成为了一个个函数。。计算机的执行，从而本质上就是在执行一个个的函数。
				>说明3：计算机作为最强大的执行者，独立执行者，原因在于它的执行具有4个流程控制特征。从而调用者可以根据这4个特征而将任务通过这四种特征表达出来描述出来、将各个任务组织起来。
				>说明4：而这4个流程控制特征的执行都可以通过专门符号语言来描述，而符号语言本身的每个功能元素都可以用数据来代表标记代替，从而用符号语言描述的任务在可以用完全数字化的指令来描述，而cpu可以执行指令---数字电路实现的逻辑功能。数字电路的逻辑是：先实现与、或、非，再从这个而基础实现更高级的异或、同或邓逻辑功能；而四则运算可以通过这些基本的逻辑运算来模拟等效实现，形成运算电路。而读、显、写、存功能更有专门电路实现（比如寄存器、比如磁盘存储器）。
				>说明5：计算机的强大强大还依赖两个基础：
						>任务本身可以是“判断-执行”的流程组合：而判断的对象可以看作是数据，执行的动作就在运算和读存（显写）或者封装出的高级接口调用函数，而这种流程组合正是计算机指令符号语言本身所描述的事情，能描述-也就是计算机能执行的事情，是计算机的功能。
						>问题的解决可以通过执行一个个任务来实现：客观问题，现实的，是视觉性质的，转换为文字语言来描述，是明确问题，简化去掉非关键因素而专注少量的关键因素，形成物理几何过程模型，是描述问题。在此模型上可以提取三大信息，或者说用三大概念来重新表述描述：初始条件、限制规则、目标功能期望功能功能结果。根据表述结果，从而使用数据结构 + 自顶向下的处理过程来等效描述；而这个描述直接可以转换为用计算机语言来描述，从而让计算机来执行，从而得到计算机计算的结果。
							>附加说明：限制规则是体现计算机强大功能的关键举措，有了限制规则，就大大显示出了人工计算人工走流程的麻烦耗时枯燥和计算机的自动快速精准不知疲倦，以及比数学高超的地方/人工+数学表示推理难计算出的地方。比如汉诺塔问题、棋牌问题、魔方矩阵问题、转魔方问题、各种必带种种规则的游戏。
			>


	>数学：
		>强大之处：再外部观察者看来：（强大的原因，就是数学的追求）
			>确定性的简便计算方法 + 等值表达式的双边同时操作运算和等值表达式组的同边叠加运算(顺推)/等值替换运算(反推) (一个量的数学形式等效转换等效处理之后变成另一种形式，而新形式可能会暴露原来的量和现实中更多的量的联系和原来的量的更多的性质，甚至新形式正是另一个量的计算表达式，从而实现两个量的关联，纯粹从形式变换而关联到了另一个量---是纯粹的数学联系--是数学的独特前进威力)+ 问题中的现实资料本身中的没有更基本的道理可以证明的明显的基本定理、变化与变化之间的明确相关的数量关系因果关系必然关系、数量与数量之间明确的相关数量关系 + 问题内容的重新表达、暴露出更多性质显露出更多特征更多规律直观必然性因果必然性的表达(比如几何化、代数表达式形式化&非简化形式完整形式精细形式)
				>说明1：现实到数学问题：。
						>变化&数量---变量(数值向量和代数字母等对象)、动作&过程---运算符号(四则和微分积分傅里叶变换叉乘点乘任意函数等运算对象类型决定的对象可被进行的操作动作处理动作和操作过程处理过程，以便描述一种变化一种数量映射到关联到关系到因果到确定到引起的导致的另一种变化另一种数量的隐藏的内涵的积累的总的整体可看作的等效的作用、操作、动作、过程、量变的传递、量变的记录量变的跟踪)、数量关系----关系符号，复合型变化----运算表达式。。。
						>变化的因变：
						>变化的精细化：即这种变化可以细分为多个变化的组合、运算结合。
				>说明2：数学问题到数学模型：
				>说明3：数学模型到简便计算方法：
						>几何问题模型为例：（表示论及其双边叠加等运算和应用而推导出的结论体系，基本公理及其向上应用而推理出的公理体系）两平行直线和相交二直线的直线。由几何图形，可以首先确定必有几个角，定义其中两种为对顶角、同位角、内错角。根据直观规律、变化斜直线规律，得到几个公理--并有等值表达式形态，通过等值表达式组的双边运算、叠加运算可以得出同位角相等的结论、或者同位角的数量关系。

				>说明4：数学威力的原因和条件：
						>a.数量可以表示、变化可以表示、变化的因变可以表示(都用变化来表示)、变化的精细化可以表示(用变化来表示)、变化的传递可以表示(也基于变化来表示)，数量之间的关系可以表示、变化之间的关系可以表示。
						>b.变化的整个起止过程中任何时刻任何位置任何因变因素取值确定则都可以一一确定-----通过变化和因变之间的数量关系表达式。而因变和变化可能有递归关系，而因变又可以用变化来表示，而对因变，又有若干不定操作、函数操作，，且层层操作后，形成的结构型表达式可能表示一个特殊的值--而和其他同样表示这个值的结构型表达式是等值的，从而有向上经过高层次上的一般量的传递作用而向下传递关系到下层次的其他地方的制约关系限制关系数量关系。
			
				>说明5：数学操作数学计算表达式的物理含义物理理解--会更形象--如高斯定律-电荷型场的通量计算。如微积分基本定理推广到格林公式的思想提升-想法出现。
					>数学计算表达式的客观含义、用客观词语概念来描述，即便是几何概念也可以，比如线、面、体，而不是还是函数、表达式、f,x、积分、微分、导数等纯粹数学的概念含义，用客观概念的目的就是推广数学定理，让数学定理去描述更一般的客观、更复杂的客观，而这个联系就是简单客观和复杂客观之间有简单的关系直观的关系，而简单的客观的数学定理和复杂的客观的数学定理却没有直观的显而易见的关系----不是随便替换符号什么的就能拓展出来的。
					>
				>说明6：推导失败的原因：
					>描述不够全面、细致、多样，非常单调，导致所用方法非常单一，看不到其他方法，导致该方法一旦复杂或者行不通，就无路可走，导致尝试终止下来，因为描述不丰富不多样（同一个量）就很难找到其他方法。	
				>说明7：数学威力的性质：
					>a.任何一种运算都有递归的特性，即运算的结果作为下一次同样运算的因子；这一次的运算结果和历史运算结果有关系---即这一次运算的输入参数的运算结果和历史的运算参数的运算结果有关系：即运算参数A的运算结果会影响到运算参数B的运算结果，A和B之间可以独立没有任何关系现实也往往有数量关系，只是运算都是一种运算。而且这种运算的参数最常见的只有一个。这样，这种运算就往往表示为一个函数f, 运算结果 = f(n)    ,而f往往就是一个计算过程---比如积分运算对应的f的含义。单重积分的结果作为积分项(积分参数)再次进行积分运算就会构成二重积分，循环进行就构成多重积分。正如连加连乘，也有连积分连微分。
					>b.一种数学形式计算表达形式计算表达方程等效转化变换之后得到的中间计算表达形式，可以反推出新的初始数学形式而不是原来的数学形式，从而各种初始数学形式，通过等效变换等效处理之后得到的形式如果一样，那么就得出了两种初始数学形式之间纯粹的数学联系数学关系。比如斯托克斯公式，格林公式。
					>c.重在描述分析的过程。既然一个量和另一个量的全部约束关系已经定了，那么通过这些关系表达式而具体化某些参数而推出的衍生的量量关系，所描述的客观现实也就是全部的客观现实了，也即是说全部的客观现实可以用全部的约束关系具体化一些参数而得出的量量关系来针对描述了来具体描述了，而且一定可以找到这样的量量关系因为一定存在这样的量量关系。。。比如磁场和电场之间的全部约束关系就是麦克斯韦方程组，所以客观现实存在的纯粹由电场磁场构成的电磁波也一定可以从麦克斯韦方程组具体化一些参数而得出的量量关系而描述而完全描述--即更精细的非必须的而特定的电场磁场关系。
	>物理：
		>强大之处：在观察者看来，物理学的追求：(基本物的基本量)量和量的全部约束关系(全部独立不依赖的约束关系)。
			>等效原理（数学操作可以等效出物理含义，物理含义基本可以表达为一种数学操作，比如相乘因子交换组合-含义就不同了。等效的原因就是数学法则-比如相乘因子可以交换的原因是满足交换律.从而转换为数学操作；数学形态和物理性质的等效和关联，微分微小过程和微小线面空间下的等效转换为规范--将任意宏观转换为由基本和特殊的微观重新构成等效构成等效描述的等价重新描述的思想方法。第二，内部等效转换） + 最根本的约束规范法则规则可以推导出下层至于最下层最具体的规律、关系、事件、现象（比如高斯定律高斯约束规范） + 过程守恒量过程等效量过程不变量对称量(静态和过程对称)
			>

				