---------------------------从软件定义到软件设计----------------------------------
---------------------------对系统分析得系统描述----------------------------------https://blog.csdn.net/wdeng2011/article/details/79425656
---------------------------从业务建模到系统设计----------------------------------https://www.cnblogs.com/daoqidelv/p/7524124.html
>横向：
	>系统的升级演化：最开始一个简单功能的系统，然后根据积累的需求和问题 而一版一版的扩展系统，每版的扩展的实现都是一次纵向分析的过程。
>纵向：
	>做任何事情：具体如让设计一个系统，设计一个功能，设计一个方案：都要有 从 抽象分析(worker mode/flux) 到 技术选型(worker)的过程；这样才有说服力。
		>抽象分析：即当要设计一个系统，但是还对它的软件细节不了解；只是对它要实现的基本功能，各个角色-职责 的确定；。一层一层向下细化(按情况分类，多分支)(细化：通过细化提问是什么/怎么做/为什么来推动)。
			>例如：设计一个rpc系统，对它的抽象分析：(rpc系统有很多很多不同的实现--但都可以把它们组织在一颗有限/无限索引树下(问题有限/无限答案索引树下))
				>顶层：客户端--负责发送服务-接口-方法-入参和接收返回结果、服务端(接收服务-接口-方法-入参，定位到具体方法和实例，调用执行，得到结果)(一句话，计算和返回结果)
				>细化一层：用户的调用方式？(1.就像平常一样获取接口的实例，然后用接口调用；2.调用一个方法入参就是“服务-接口-方法-入参”)对获取到的服务接口方法入参数据 的加工方式？(1.加密压缩序列化)加工之后数据通过网络发送给服务端的方式?(网络通信协议，数据协议)
				>细化二层：平常一样时则接口的实例如何获取?(动态代理/new实现类/SPI加载客户端/工厂方法/suplier回调)怎么加密怎么压缩怎么序列化？(1.AES/DES/zip压缩/hession序列化)tcp/数据分割方式发送给服务端怎么实现?(通信框架选择：netty,NIO,AIO,BIO)
				>细化三层：...
				...
				>细化n层：就是技术选型(如何技术选型？需求-已有方案 的 最佳匹配(选择/推荐))(自研)
			>上一层的概括：用下一层的语言概念来细化描述；
		>业务建模：
		>技术选型：(具体的各个技术实现，就是在维度上不同；所以可以用维度来统一描述各个具体的技术/具体可能的所有的技术) 每种技术，最重要的是：指标维度；比如rpc框架(通信协议、序列化协议,效率，并发度)，比如监控告警系统()
			>方法1：看功能需求是否被满足
			>方法2：看该种技术的缺点和问题是否能被接受
			>技术的组织：维度树；维度表；每个技术框架的维度值；。。任意一种一个技术都有多个维度的值，且要精心测出来；一种技术，则是一套固定的维度；不同种的技术，有不同的维度组合/另一套维度；
				>维度：维度就是影响功能和性能的因素；(有的人喜欢装逼，一点点懂，知个皮毛也敢出言必谈--知道个名词而已)
				>从这个角度看：选型就是根据自己的需要走这个维度树，找到匹配符合的技术而已；
		>编码：
			>少用值进行判断：而用方法；用具体值判断，这样的判断需要放到最底层，且独立放在某个方法里，独立处理，不和其他具体计算放在一个方法的不同大括号里！！
			>少用具体类引用判断：而用接口变量；
			>少new: 尽量模式创建；单例/工厂/建造/原型
			>面向逻辑编程：方法按逻辑分层组织，每一层的逻辑是不一样的，每一层的精细具体程度是不一样的，放到不同的类里；
				>提高代码稳定性：稳定性就是不变性；不是经常对一个类修修改改 才能满足需求；就像系统稳定性一样，没有弹性空间；
				>代码健壮性：不需要经常吃药、缝缝补补、修修改改；也能满足新的需求；就是层次设计，把改动降低到最底层的一小部分；
	>软件系统设计基本原则：
		>抽象：
		>模块化：
		>封装：
		>模块独立：
		>系统深度/系统宽度/模块扇入/模块扇出：
	>业务建模：领域分析，该业务设计的对象，概念/属性/行为/规则 之间的彼此关系联系，进一步是 它们 构成的 参与的 形成的 活动/游戏/功能：
		>功能：从功能确定开始，自然切入系统的抽象分析，然后详细设计到技术选型；
		
	
--------------------未来规划()---------------------------
>能力上：可能不要把工程技术当作自己的强项，当然再差也要达到很强的水平；但最强的(同时也认为是最独特最有优势最有趣的)，一个是数学物理推理建模能力；二个是用户需求细述(商业分析)；产品体验创新设计、工程技术(系统分析架构能力)。
	>精力投入：
		>数理推理建模：机器学习、深度学习、强化学习。自动化工具、效率工具。
		>用户需求细述：用户需求是什么？当前行业商家的满足情况？用户的满意度情况？满意度指标？
			>提出问题：痛点是否备满足，用户需求寻找；
		>系统分析架构：抽象分析，层层细化，到技术选型；
		>产品体验创新：吸引人的东西是什么？这个产品上能否有？怎样的形式和内容加进来？
	>带上自己的方案集+模型集：
	>选择行业非常有必要：因为有的行业下，主力没有做it,it系统发展的慢，水平确实很糟糕，基本还是老技术，且主力在编写业务逻辑；所以行业，还是要选择 电商、搜索、云计算之类；
--------谈la：
	>你有超过50%的人的优点：不足夸；你有超过90%的人的优点，可以好好说一下；算法/源码/架构/AI
--------公司预见：
	>公司营收太低：会有各种病；发展太慢的，好几年仍然规模极小，都会有各种公司病！！！
	>公司发展慢、公司营收太低是最大的罪恶！！