>架构：就是开发一行代码之前的所有可以进行的为了达到造出来的系统最好这个目标的准备工作 ，中 最核心的工作、纽带性指南性的工作。有大量的指标、问题、课题、方面要预先讨论方案。方方面面，大大小小，都要有方案。
>系统拆分：
	>业务整体上考虑：
	>技术上考虑：
>系统选型：寻找系统约束条件。
>技术系统从无到有的一步步确定过程：就像画画、画蓝图、画复杂的图像一样。也像建筑的从无到有的过程。甚至有点像一个目标变量的推导关联过程。
	>业务架构：
		>
	>应用架构：采用单体、分布式、SOA架构？
		>分布式：则应用之间的互相通信机制和数据格式：
			>通信机制：采用同步、异步、共享访问？
			>数据格式：XML,JSON,二进制。HTTP+JSON最常见。
			>部署：独立部署。
			-总体特征/优点：应用内部高内聚、独立开发测试部署、应用之间松耦合；业务边界清晰、业务依赖明确。
			-缺点：API接口需求变化，应用就需要重新部署。通信可靠性和数据的封装性，相比于进程内调用，要差。
		>SOA:
			>服务治理：
				>服务注册：
				>服务路由：
				>服务授权：
				>服务降级：
				>服务监控：
			>服务状态：无状态，则容易做水平扩展
			>故障隔离和资源高效利用：容器虚拟化技术。
			-缺点：分布式数据一致性和分布式事务支持困难：最多采用最终一致性？BASE
	>技术架构：
		>
		
>流程图：
	>一般的流程图：
	>嵌套流程图：每个节点本身还是一个流程，放大来看，其中某个节点还是一个流程，这样，无限分割下去---像雪花轮廓一样。
		
参考：https://blog.csdn.net/ownfire/article/details/90204762?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase
		