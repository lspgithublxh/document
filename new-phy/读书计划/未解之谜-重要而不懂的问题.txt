1.spi机制：
	>jdbc-Driver; nio-Selector-Charset
	>需要找到**Provider,然后调用其方法来实例化一个对象。
		>如Selector.open()内部就是通过获取默认的 DefaultSelectorProvider 对象来提供 WindowsSelectorImpl实现类
	>为什么要spi: 因为为了某些api必须来自同一个实例提供者，这个提供者提供一套对象，这些对象不能使用其他提供者提供的对象--以免发生问题。
		>如jdbc,则提供者提供Driver以下的一套连接类对象。
2.可扩展性：
	>系统是否可以更强大？更多功能和更强替换？可选择可配置可替换可接入(很多接口很多各种标准接口)？
	-基本的：接口设计、插件结构、代理设计、SPI设计、模板设计、策略模式、大量的地方不定死不具体不限制死-可选择可配置可自定义---哪些地方可以再抽象一下更统一的形式结构、一切出现了之智能...的地方都抽象一般化统一化特征化变量化；
	--：参数配置、数据交换、新模块加载、已有模块在线替换、接口不定死无限制
	--：特征编程 而不是 具体编程。