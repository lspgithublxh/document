---------读书战略：自顶向下，从应用层到底层细节。先熟悉的常用的，后底层的不常用的。
--------es的处理思想都对应有 相应的“某种举动 及其导致 的问题”
>需求背景-痛点陈述：现实开发中遇到了什么痛点导致XXX的开发？  
>那么痛点的原因、产生的条件：分析是什么环境、什么动作 什么效果什么目的 等精准形容词的事实描述 导致了痛点的必然发生，难以避免？。条件-痛点。原因-结果。
>则可以消除痛点的最简单的精准事实陈述是什么：修改“条件-痛点”陈述的哪一部分就可以导致没有痛点产生。 要做的根本事情是什么：
>那么新陈述表明的解决动作是什么：
>新情况的新痛点是什么：新举动、新环境会产生的新痛点描述出来， 继续上述4条操作。

1.举动-痛点：搜索-索引。全文搜索、处理同义词、根据相关性给文档打分？同一份数据生成分析和聚合的结果？在没有大量工作进程的情况下能做到对数据的实时处理？
	>解法/处理思想：实时分布式搜索和分析引擎(前所未有的速度处理大数据)、全文搜索、结构化搜索、分析、分布式数据库。在数百服务器上处理PB级别的数据。
		>lucene:  最先进、性能最好、功能最全的搜索引擎库。
		>elasticearch: 内部使用lucene来搜索和索引，对外提供restful api接口来让使用者输入简单易懂的搜索和索引请求，内部会接收并转化为复杂的参数来调用lucene完成实际的功能。
		 >分布式的实时文件存储：每个字段都被索引而可被搜索。
		 >分布式的实时分析搜索引擎：
		 >扩展到上百台服务器：处理PB级别的结构化-非结构化数据。
		 >高级特性：
		>java客户端：可以加入集群，也可以纯粹是一个请求发送方：使用elastaicsearch传输协议。9300端口。
		>restful api: 基于http协议，json为数据交互格式。curl自然也可以。 
		 >查询格式：curl -X<GET/POST/...> '协议://host/path?query_string' -d 'json格式请求主体'  。 如计算集群中文档的数量：curl -XGET 'https://localhost:9200/_count?pretty' -d '{"query":{"match_all":{}}}'
			返回格式：body里的内容：一个json格式的数据：{"count":0, "_shards":{"total":5, "successful":5, "failed":0}}
		>面向文档存储：直接存储一个对象类型的json格式文档。并且可以索引每个文档的内容。可以对每个文档进行搜索、索引、排序、过滤。JSON格式是NoSQL领域的标准数据格式。
		>搜索-索引实例：es--->indexes--->types--->documents----->fields
		 >索引：动词：是存储文档。名词：是存储各类文档的地方。倒排索引：使用来加速检索。默认情况下，文档中所有的字段都会被索引---拥有一个倒排索引。
		  >命令：PUT /索引名/类型名/文档ID序号 {文档JSON内容}
		 >检索：检索单个文档。
		  >命令：GET /索引名/类型名/文档ID序号 。。返回内容包括文档的元信息， 文档的内容包含在"_source"字段里。
		 >简单搜索：
		  >搜索全部员工：GET /索引名/类型名/_search  返回结果为3层Json: 第一层键：耗时、分片之类；"hits"键的json结构值为第二层键：命中文档总数、最大分值等，"hits"键的json结构值为第三层键：为一个数组：对象即检索文档返回的结果。
		  >搜索名为Smith员工： GET /索引名/类型名/_search?q=last_name:Smith 返回结构同上。
		 >结构化搜索：DSL语句查询。查询参数为json格式。
		  >搜索名为Smith员工：GET /索引名/类型名/_search {"query":{"match":{"last_name":"Smith"}}}
		   >增加年龄>30的限制：json查询参数上：使用：query-->filtered--->filter-->range:{"age":{"gt":30}} 结构。同时query--->filtered--->query--->match依然成立。	
		 >全文搜索：语法上同上。但是对于文本很长的字段，会有“不完全匹配”也能搜索到的效果，只是分值低，排序在后面。相关性排序的结果。
		 >短语搜索：语法上，仅仅将match改为match_phase。这样，必须是完全匹配--包含才可以，不会进行分词匹配仅仅单个的那种文档。
		 >高亮展示：意义不大，语法为：query级别："highlight"-->fields-->字段：{} 结构。
		 
		 
		 
		 
		 
		 
		 
		 
		 参考资料：