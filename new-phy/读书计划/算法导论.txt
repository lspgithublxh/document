---------读书战略：自顶向下，从应用层到底层细节。先熟悉的常用的，后底层的不常用的。精读好书---《深入理解系列》
--------es的处理思想都对应有 相应的“某种举动 及其导致 的问题”
>需求背景-痛点陈述：现实开发中遇到了什么痛点导致XXX的开发？  
>那么痛点的原因、产生的条件：分析是什么环境、什么动作 什么效果什么目的 等精准形容词的事实描述 导致了痛点的必然发生，难以避免？。条件-痛点。原因-结果。
>则可以消除痛点的最简单的精准事实陈述是什么：修改“条件-痛点”陈述的哪一部分就可以导致没有痛点产生。 要做的根本事情是什么：
>那么新陈述表明的解决动作是什么：
>新情况的新痛点是什么：新举动、新环境会产生的新痛点描述出来， 继续上述4条操作。
>学习要有战略和格局：过于零散、孤立、末支、叶子的知识点就没必要化太多时间，懂得放弃。聚焦在根节点、枢纽节点、产生分支的节点、主干知识点、枢纽知识点、关联到很多知识点的知识点上。
 >对于主干知识点：要有全新的认识视角和进行精细的描述，大量的提问和好奇和进行必要的实验以获取支撑观点/导出观点的数据。
 >规范是工程最独特的特征.
 
>举动-痛点：分治法、动态规划、贪心算法、摊还分析、NP完全性和近似算法
  >解法/处理思想：归并排序：采用了分治法。渐进表示 来表达算法运行时间
   >一类算法问题的共同特征：很多候选集，其中只有一个或部分是最优的。有效算法。NP完全。
   >算法分析出来的过程/框架/步骤：科学推导过程。每个步骤上的方法集合。
    >框架模式1：将文字描述的问题用基本数据结构来重新表达，即
	 >1.要将问题的条件-用数据结构表达，
	 >2.然后对期望的结果-用数据结构+标志变量来描述， 
	 >3.接着就是寻找结果数据结构如何通过条件数据结构一步步得到
	  >路径1：结果的上一步一定是什么样子可否一定可以确定范围, 可以则继续上上一步什么样子，直到条件数据结构；溯源法。如美团的矩阵路径。
	  >路径2：分析得到结果的必要条件，先知条件。转为计算先知条件。层层递归。
	  >路径3：从条件数据结构场景开始，能做的动作有哪些，做完动作后的新数据结构场景是否是相似的，或者出现的新数据结构场景是固定有限个类型的，只是规模不同，那么可以以相同处理序列/函数处理计算子数据结构场景，得出子结果按实际关系局部和整体的得出关系来表达出表示出父结果；。如二查树的三种遍历：仅仅打印位置在代码不同位置。如归并排序算法，复杂度仅仅为n*log(n) + n/2
	  
	  
   >算法的验证和效率估计：
   >软件工程的问题范围包括：数据抽象、模块性、异常处理、日志。
   
   
   
   
   