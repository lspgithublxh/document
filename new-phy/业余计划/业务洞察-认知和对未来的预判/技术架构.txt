>技术架构目标：打造分布式强一致性高可用的技术架构。(系统)。稳定性架构师(拼多多)，高可用架构师(淘宝)
	>技术平台稳定性：提高办法：
		>全链路压测平台：
		>容量评估和调度平台：容量调度管理、稳定性压测、活动保障、混沌工程
		>稳定性模拟平台：
		>可视化架构平台：
		-性能优化最佳实践模拟平台：
	>技术平台高可用性：限流->熔断->降级->
		>容灾：灾备
		>降级：熔断之后调用替代方案(替代接口)来获取替代数据/兜底数据来应对。就叫降级(概括了一连串动作)。
		>熔断：调用的服务挂了/网络超时。
		>限流：服务方为避免自己被压垮而限制的每秒总调用量的上限(或可以精确限制某个调用方)。(另一种方法：客户方主动限制对服务方的调用--但是这样依赖客户方是不完备的--对应没有申请过调用的服务方是不允许调用的-而这个通过第一种就可以实现<服务方的接受方map里没有该调用方的key>)
		>缓存：避免高频直接调用数据库：一减少数据库压力，二提高响应速度。
		-过载保护：
		-性能：
		-安全：
		-容量：
	>技术平台的高负载性：
	>技术平台的高并发性：
>项目技术架构目标：
	>根据业务需求：制定系统的技术架构，保障系统安全、稳定、快速运行。
		>业务逻辑层的技术架构：
		>业务数据层的技术架构：
		>业务部署层的技术架构：
		>业务全链路的压测和监控技术架构：
>个人目标：大数据分析监控推荐搜索系统。全链路监控(技术准备：看书、看源码、做东西)
	>计算、存储、网络：
>个人目标2：定制AI开发：
	>alphGo-alphZero:
>个人目标3：分布式关系型数据库：2个月的时间可以开发一个demo出来(数据更新线放在内存，后才持久化到磁盘)。
	>oceanbase的例子：
		>淘宝收藏夹的例子：做了一个宽表。
			>宽表：物化视图。
				>业务模型：常规的办法。
					>概念：
						>内存表数据：一行一个用户的数据
						>磁盘表数据：一行一个用户的数据
						>分片：一个user_id范围。每个分片都在meta元数据节点有记录。
							>主分片：读写负责。也负责将事务的日志同步到超半数副本。//其实不需要备库？
							>副本分片：读负责。2个。
						>分布式事务：
							>确定主库是否真的有故障：
							>选举出新的主库：
							>机器之间相互握手把数据补齐：
					>行为：
						>查询/更新/删除/修改：查一次磁盘基线数据+进行内存中记录的增删改动作(类似git记录增量)(内存中不记录实际真实的数据-量太大)
						>持久化：凌晨2点持久化到磁盘。
					>规则：
						>数据在哪个分片里、分片在哪个节点上：通过查询元数据得到。分片服务器chunkServer,合并服务器mergeServer
						>
						>
				>业界调研：
					>mysql: 主备镜像做不到完全一致。借助硬件的可靠性：硬件成本高，扩展能力低。
					>

>java技术专家：接下来1-3年：融会贯通。java-数据库-算法，三极优势。
	>java: 基本api和jvm，源码和机制逻辑
	>中间件：mysql/redis/es/kafka/hbase/zk
	>底层原理：计算、存储、网络
	>系统构建/架构和维护：分布式系统。
	>AI框架: 熟练应用 且 对 机器学习/深度学习/强化学习有深度思考。
		>华为图神经网络平台：
>基本拔高技能：
	>计算：
	>存储： 
	>网络：
>业务技能：
	>指定业务领域，明确根本功能和根本目标，而直接自己设计若干个创新的活动的业务模型(概念/动作/规则)：比如：指定 短视频， 则 设计若干个短视频领域的创新的活动/游戏/玩法。指定新闻， 则设计若干个新闻消费的一个活动/游戏/玩法。
	>业务开发过程中，遇到的痛点，明确诉求(希望解决什么问题)，开发服务业务的技术工具技术平台：
	>全局洞察-掌控-指挥者：(胆识/器识/才具)梳理设计 任务 的详细完整逻辑结构图(从开始<什么也没有>到完成目标<技术系统/业务系统>；从初态到终态)，反复论证验证和预演(所有阶段，所有独立的任务，所有互相牵制/前置/条件/资源，所有可能遇到的问题/对应方案/策略)，任务分派和调度(工期-资源-人都精确指定)(军事作战图和git多流并进图)和接力，进度监控和质量效果评估/实时的可能备案和方案策略调整(掌舵)。
>业余技能：
	>对行业发展做出一定准确的判断：预判。新闻收集，信息收集，分析整理处理。
		>看新闻、收集新闻：将其中的关键字提取出来：建立一则新闻的业务模型。
		>每篇文章的逻辑结构：开展独特的别具一格创新创意的研究。
		>系统分解：软件系统的分解。软件系统的逻辑分解。软件系统分解出逻辑结构。
			>从业务的逻辑架构梳理确定：到落地逻辑架构的分层技术架构(数据库-原子微服务-业务微服务-前端)。
	>28岁了不能等别人安排：自己必须有意见和主动提出方案。
		>先见之明：
	>事件导致的各方关系变化对我方的关系影响：关系演进-⚪-线图。
		>
>业余修炼：
	>看书：
	>看源码：
	>逻辑构建/技术推演：下棋\技术逻辑梳理。养成一个习惯。
		>逻辑越细越精妙：发现里面还可以做很多顺序的事情，很多隐藏的步骤都存在，比如意思的扭转扭转再扭转...。
		>设计训练：设计逻辑话术/逻辑技术：看会有怎样的反应，得到什么样的结果。
>未来10年发展规划：增加大规模分布式系统的架构与研发：比如分布式消息系统、分布式数据库系统、分布式跟踪系统、分布式缓存系统、分布式搜索系统...。
	>中台开发发展路线：开发强大的：微服务框架、私有云、分布式数据库、分布式消息系统、分布式配置系统、分布式缓存系统、分布式监控系统、搜索系统、推荐系统、大数据分析系统、机器学习训练系统()
		>阿里中台内容：
			>HSF分布式服务框架：支持服务的点对点调用。服务通信框架、服务治理系统。
			>微服务设计方式：提高变化响应。
			>DDD领域驱动设计模式：提升设计效率。
			>分布式数据层框架TDDL：
			>分布式数据库DRDS：
			>支持分布式事务处理的AliWare TXC:
			>鹰眼平台：高效故障定位和运维监控：
			>全链路压测平台&业务一致性平台：实现限流和优雅降级设计(不慌乱就是优雅)，做保障的全链路压测平台。
		>其他互联网公司要求：
			>消息中间件高可用方案：
			>分布式跟踪系统：
			>分布式系统：(大规模流式、离线计算):hadoop/spark/hbase/flink
		>分类基础组件：
			>数据库方面：
				>mysql数据库巡检系统:降低风险、提高服务稳定性。
					>保证数据库稳定运行：
						>资源管理：
							>服务器
							>容器
							>压测和容量评估
						>异常发现与治理：
							>监控：
								>faicon:
								>链路监控：
								>深度监控：
								>报警自动处理：
							>日志：
								>慢日志：
								>processlist日志：
								>innodb status日志：
							>巡检：
								>数据库巡检：
									>旧方案：中控机+定时巡检脚本+前端展示
										>问题：依赖中控机，存在单点问题。巡检结果分散再不同的库表，无法进行统计。隐患要打开前端查看，影响整体隐患的治理速度。
									>新方案：设计原则-系统架构
										>设计原则：稳定(高可用高性能持久)-高效-可运营(推进隐患治理，查看治理效率、趋势、薄弱点等)
										>系统架构：制定巡检任务-调度而巡检-前端查看和整理
										>技术架构：
											>脚本：python virtualenv+git
											>分布式定时任务系统：crane
								>周边产品巡检：
						>灾备管理：
							>高可用：
								>MMHA:
								>slaveHA
							>备份：
								>逻辑备份：
								>物理备份：
								>恢复测试：
							>演练平台：
								>报警演练：
								>机房断网演练：
						>数据服务：
							>一致性检验：
							>DTS：
							>数据恢复：
							>数据归档：
							>查询变更：
			>业务方面：微服务方面：
				>全链路自动化监控平台：ELK Stack, Cat, Google Dapper、Prometheus
					>调用链采集：有向无环图。
	>新应用的业务建模：构想新应用：
		>通用基础业务研发：
		>系统平台化建设：
	>分布式数据库：可能是所有分布式系统里最难的一个。
>技术预判：
	>流计算：
	>深度推荐：松鼠AI那种级别。知识图谱、深度学习、强化学习。
	>分布式数据库：数据库容器化调度、存储计算分离研发、容器平台研发。
		>数据仓库：
		>数据建模：
		>备份容灾：
>其他：
	>togaf:
	>ATAM:
>职位要求：
	>持续优化系统架构、提高系统在高并发、大流量下的容灾容错能力，保证系统的高可用性(性能、安全、容量)
	>熟悉分布式系统的设计和应用，熟悉分布式、缓存、消息、负载均衡等机制和实现
	>熟悉高性能、高并发设计方案，例如：全文检索、消息队列等；熟悉高可用系统设计方案，如服务升降级、限流、主备切换等；
	>有云计算、运维系统、分布式系统、Web后端等1个或多个系统的研发经验
	>要求有良好的建模能力，熟悉MQ、Cache、RPC等中间件原理；
	
>参考资料：
1.阳振坤：oceanbase:https://www.cnblogs.com/imstudy/p/9957383.html			
2.web项目架构演进过程：http://www.52im.net/thread-2007-1-1.html：应用服务器集群(-->应用拆分出多个微服务中心形成微服务架构)+搜索引擎集群+缓存集群+数据库主备读写分离-->垂直拆分/水平拆分
3.柏泽：https://zhuanlan.zhihu.com/p/37979505
4.tpc-c含义正解：知乎：https://www.zhihu.com/topic/19650908/hot(今年阿里1500台ecs服务器)
5.3年后的岗位：https://www.zhipin.com/job_detail/0d502c667d58c1e20Xd-0t65EVA~.html?ka=job_sug_4 java技术专家-40k-数字化解决方案/一体化解决方案-系统设计和分析和技术方案的确定(架构设计-独到的认知)。