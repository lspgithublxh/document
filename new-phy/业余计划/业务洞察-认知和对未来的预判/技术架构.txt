>技术架构目标：打造分布式强一致性高可用的技术架构。(系统)。稳定性架构师(拼多多)，高可用架构师(淘宝)
	>技术平台稳定性：提高办法：
		>全链路压测平台：
		>容量评估和调度平台：容量调度管理、稳定性压测、活动保障、混沌工程
		>稳定性模拟平台：
		>可视化架构平台：
		-性能优化最佳实践模拟平台：
	>技术平台高可用性：限流->熔断->降级->
		>容灾：灾备
		>降级：
		>熔断：
		>限流：
		>缓存：
	>技术平台的高负载性：
	>技术平台的高并发性：
>项目技术架构目标：
	>根据业务需求：制定系统的技术架构，保障系统安全、稳定、快速运行。
		>业务逻辑层的技术架构：
		>业务数据层的技术架构：
		>业务部署层的技术架构：
		>业务全链路的压测和监控技术架构：
>个人目标：大数据分析监控推荐搜索系统。全链路监控(技术准备：看书、看源码、做东西)
	>计算、存储、网络：
>个人目标2：定制AI开发：
	>alphGo-alphZero:
>个人目标3：分布式关系型数据库：2个月的时间可以开发一个demo出来(数据更新线放在内存，后才持久化到磁盘)。
	>oceanbase的例子：
		>淘宝收藏夹的例子：做了一个宽表。
			>宽表：物化视图。
				>业务模型：常规的办法。
					>概念：
						>内存表数据：一行一个用户的数据
						>磁盘表数据：一行一个用户的数据
						>分片：一个user_id范围。每个分片都在meta元数据节点有记录。
							>主分片：读写负责。也负责将事务的日志同步到超半数副本。//其实不需要备库？
							>副本分片：读负责。2个。
						>分布式事务：
							>确定主库是否真的有故障：
							>选举出新的主库：
							>机器之间相互握手把数据补齐：
					>行为：
						>查询/更新/删除/修改：查一次磁盘基线数据+进行内存中记录的增删改动作(类似git记录增量)(内存中不记录实际真实的数据-量太大)
						>持久化：凌晨2点持久化到磁盘。
					>规则：
						>数据在哪个分片里、分片在哪个节点上：通过查询元数据得到。分片服务器chunkServer,合并服务器mergeServer
						>
						>
				>业界调研：
					>mysql: 主备镜像做不到完全一致。借助硬件的可靠性：硬件成本高，扩展能力低。
					>
					
>基本拔高技能：
	>计算：
	>存储： 
	>网络：
>业务技能：
	>指定业务领域，明确根本功能和根本目标，而直接自己设计若干个活动的业务模型(概念/动作/规则)：比如：指定 短视频， 则 设计若干个短视频领域的一个活动/游戏/玩法。指定新闻， 则设计若干个新闻消费的一个活动/游戏/玩法。
	>业务开发过程中，遇到的痛点，明确诉求(希望解决什么问题)，开发服务业务的技术工具技术平台：
	>全局洞察-掌控-指挥者：(胆识/器识/才具)梳理设计 任务 的详细完整逻辑结构图(从开始<什么也没有>到完成目标<技术系统/业务系统>；从初态到终态)，反复论证验证和预演(所有阶段，所有独立的任务，所有互相牵制/前置/条件/资源，所有可能遇到的问题/对应方案/策略)，任务分派和调度(工期-资源-人都精确指定)和接力，进度监控和质量效果评估/实时的可能备案和方案策略调整(掌舵)。
	
	
	
	
>参考资料：
1.阳振坤：oceanbase:https://www.cnblogs.com/imstudy/p/9957383.html			
2.web项目架构演进过程：http://www.52im.net/thread-2007-1-1.html：应用服务器集群(-->应用拆分出多个微服务中心形成微服务架构)+搜索引擎集群+缓存集群+数据库主备读写分离-->垂直拆分/水平拆分