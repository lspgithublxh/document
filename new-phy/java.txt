1.问题：掌握已经有的，就是一件大事。就可以让自己值钱！
	>修炼哲学：用自己的语言说，用自己的双手做
		>不要装累装懒，而不务正业做浪费时间的事---而后面又羡慕别人和后悔自己，且还会真的累和懒，导致什么都没有掌握。！！
		  >自己本来就没有多少东西让人佩服尊敬的，如果还不持续努力，那么就太让人失望了！！与别人的差距就更大了，就会更加的不敢说话和脆弱和落后！！甚至连乡村的人都比不上！！！
		  >要集中注意力于一点，一个目标上---一个阶段一个时期，不分心的持续努力！！！
			>而为了这个目标这个大事而分多方面进行努力，多方面协调的努力；把这个大的工作、大的事情、大的职责分解为多个环节多件事情独立并行的做。来从多方面刺激发现体会到思想和技巧，并逻辑完备的前进。这样分离，既不单调也不分散精力，既有新鲜的乐趣也有攻克困难解决问题-探索发现功能|原理|机制|过程|职责-创造发明简化方法简便方法简便工具新技巧新工具新功能工具--升华打磨而做成服务产品的乐趣！！！！
			>提出问题-把不懂的想懂的不会的想会的描述清楚：把疑惑的问题、不懂的问题都表达出来，想弄懂的问题记录下来，记录下来，组织起来，并且不断的拓展；。
			>再分析问题-得出不得不做的最简最优做法办法方法策略路线方案：认识问题，分析情况、条件、联系、规律，抽象出概念，层层向上抽象出来，人工逻辑关系，人工逻辑推理连接关系，科研式的逻辑演进，用规律来压缩、简化、减少动作、减少对象、减少存储量-记忆量-动作量-能量消耗量，简化到极致-简化到理想状态，用规律统领，更重要的时用抽象概念来统领---统领整个认识全部的认识---统领全部的方案方法。就像压缩文件一样，压缩认识、简化认识，而同时又能解压缩解认识，而独立恢复出完整的一致的全部数据，独立恢复出完整的、一致的所有认识。
				>知识压缩法：！！规律、抽象、人工逻辑、抓头。
				    >抓头：就是梳理出本源、根本；导致一系列结果的根本事情；导致一系列衍生问题的根本问题、根本现象、根本矛盾、根本情况、根本事实。
			>再设计执行方案-独立做出来做样例做产品：自己讲自己做
		>先认识功能，弄懂了再看原理，简化了原理弄通了再自己做而模拟一个，最后利用来做成应用产品服务！！
			>功能描述清楚：清楚的标准和特征表现和根本认识根本变化：现在很多时候，对很多系统，很多工具，很多产品，是连功能都描述不清楚的不准确的不本质的不有效的。
				>不要不痛不痒，周围盘旋，绕来绕去，没有说到点上。
			>原理描述清楚：清楚了，简化了，极致简化了，掌握了。办法就是：自己来，用自己的语言，用自己的行动自己做。
			>来龙去脉：这个工具---所处的业务背景，业务发展中遇到的问题，所要解决的问题；明确后，再认识其功能。
		>大量阅读长篇分析型文章：取缔零散阅读，要阅读那种一篇能读一天以上的长文；并且自己来，对比作者，总结深究，得出结论方法工具，趁热强化训练。
			>对长文逐句逐字逐概念研究：彻底弄通、熟练运用、制作产品，三个阶段。。带着问题，疑惑的问题，先提出来、罗列分类出来，然后再自己来分析思考，然后再看长文，并边看边自己来。(p8长文，博士长文，专家长文)
			>彻底弄通的引导理解的提出的问题树：
			>技术阅读，头脑中一定要是模块语言，一定不是现实的图像，必须是代图框图调用图这样抽象的表达，通用的表达表示---才是最抽象而不失本质不失真的，而表达出来本质的最少元素而恰能表达本质的，就是重点就是关键核心。
				>一定不要先管具体图像是什么，具体长什么样，外观什么样，必须是抽象的框图描述！！框图形式，无需管具体什么样-------否则看不下去，没有逻辑，让思路断裂。比如云计算各种实体和操作；就像数理是看模型和代数几何。
		>牢固掌握一个概念：不能直接理解它的最底层的概念组织起来的描述形式，而是要环环相扣，层层分解，看下一层分解时候的概念组成图，连贯不断的分解，层层都认识到，是真正彻底弄通的标准--------属于让我来的具体做法指导。
			>让我来的指导：可以看到自己的真实水平、真实缺陷、真实不足，而有目的有问题地提高自己：让我来和让高手来，看分别会采取什么做法和分析，军事指挥(路线)和技术(策略)都可以。
			>理解也需要战略战术路线：不能生硬直接地去理解，
				>层层转化简化：
				>层层提问：理解路线，前进路线、推进路线，推进方向，树状路线;; 谋定后动。
				>层层承接：扼住、总揽、因果、；有A则B, 知A则知B,由A得B,由B得C,,,.....,越是后面越是复杂不直接和规模大必要描述越来越多的系统对象。
	>切换思维：没有思考时，就训练、使用、应用和记忆，后者是轻松的切换的不思考而没有害处的。。
		>思考问题时：语言时刻在线。
		>
	>java整体体系的知识：有事没事看看java相关的小知识技术博客-----网络的和计算机级别的也可以
	>问题1：cpu级别的CAS指令：计算之前读内存值A，计算之后读内存值B，当A==B时，将计算值回写到内存，否则返回失败状态。。。乐观锁---能冲突检测，认为冲突概率小且冲突了返回失败就可以而不用对内存加锁。。
	>问题2：classLoader: 限制启动类加载器Bootstrap ClassLoader才能加载某个类：比如限制sun.misc.Unsafe类(CAS操作)。。限制下的访问：
			>使用反射调用的方式来加载sun.misc.Unsafe类：使用它的cas方法：compareAndSwapInt()等
			>使用使用了Unsafe类的类比如AtomicInteger: 使用它的getAndIncrement()自增方法---这个方法转变为指令时就是CAS指令---和i++这种语句生成的指令不一样: 用多线程时有更高的并发性能。
			>数据版本号：AtomicStampedReference对象引用的原子性--解决ABA问题。
	
     >十大基本问题：(除了平时搞应用之外，也要关注这些基础) 每个都一张图简要描述---抽象描述
	>问题3：并发：
	>问题4：集合：
	>问题5：线程：
	>问题6：通信：
	>问题7：加载：
	>问题8：回收：
	>问题9：队列：
     >十大基本框架：(不知其过程设计的根据和原因，不会抽象描述，就不会有兴趣) 每个都一张图简要描述---抽象描述(就像苏东坡一段落一个字、两个字、三个字、一句话描述一样   向上抽象)
	>问题1：springmvc:
	>问题2：tomcat:
	>问题3：springcloud:
	>问题4：springboot:
	>问题5：spark:
	>问题6：kafka:
	>问题7：hadoop:
	>问题8：mysql:
	>问题9：redis:
	>问题10：docker:
     >常见基本应用问题：
	>top(n):1亿数据求最大的10个数，用堆法--树--一直排好序的10个数，来一个二分查找比较一次---自动保留10个--自动去掉最小的那个-----链表的方式：直接插入再去掉尾元素，。。（甚至所谓的双向链表）。
     >linux运维技术问题：
	>基础问题：	
		>用户和权限
		>进程、资源、文件、任务、软件包、磁盘等管理方法
		>企业级常用服务：DNS, FTP, Http, Mail
		>
	>安装Centos和配置环境：
	>Nginx反向代理和负载均衡：
	>Keepalived高可用服务器：
	>Memcache服务安装：
	>Nagios监控工具：
     >云计算问题：
	>业务背景：IT平均资源利用率低；痛点，事实。
	>引发需求：弹性的IT基础设施
	>需求分析和提出功能：高可用的、按需的、通过网络就可以快速即时获取到而便捷使用的、在线的远程的共享的弹性的多样的计算资源服务提供商。。从服务器、操作系统、应用软件到网络访问资源、各种具体的数据、服务。
	>功能的解决方案设计：谷歌“云计算”概念和架构体系---->亚马逊弹性计算云商业化运用---->ATT动态托管服务
	     >整体方案：底层分布式系统，中层虚拟化(以提供小块小块的资源，以充分饱和利用和共享利用)，上层资源调度编排管理并提供给客户方基本操作接口
		   
