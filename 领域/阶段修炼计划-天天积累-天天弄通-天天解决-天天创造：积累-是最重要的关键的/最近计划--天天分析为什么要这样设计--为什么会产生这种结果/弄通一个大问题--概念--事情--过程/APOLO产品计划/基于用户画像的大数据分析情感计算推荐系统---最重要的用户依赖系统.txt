1.问题描述：
	>预知：
		>产品-商品：产品属性，商品属性
		>



	>应用软件系统的本质：
		>记录用户输入信息、响应用户而返回信息。中间做一些信息归类、存储、转换为标准格式标准数据结构、再分析处理。

	>推荐系统理论分析和设计：
		>基本观点：相似用户（最近用户）、相似产品（最近产品、关联配套产品、就喜欢就打算就需要就不介意同时购买的产品）、用户-产品（最近的用户和产品），
		>基本概念独立自己建立：
			>用户足迹：用户访问过什么东西、做过什么操作（访问也是一种操作，对于游戏，操作更多），都有记录。
					用户做过什么操作后，会有响应的响应、数据变化、数据结构变化、模拟的假定为某实际物的数据结构的变化（产生或者改变删除），从而模拟现实实际的活动、模拟一个类似现实类比现实活动的有规则的有效果的公平合理的等效的活动；活动可以是社会活动、商业活动、政治活动、军事活动、民事活动（也叫活动搬到线上，活动互联网化）。
					模拟活动的方式：总结提取出现实活动的各个对象、对象的属性和动作和功能、对象之间的关联，活动整体流程：从开始到结束，整个不断内向分割的活动流程。一次活动的记录，包括活动的时间、参与者，活动的开始、活动的进展、活动的过程、活动的发展活动的结束。
					纯粹的互联网活动：（模拟了实际活动，而类似实际活动；如游戏，如用支付宝支付活动，登录门户网站看新闻）...引导用户生产信息、输入信息、感知用户信息--和用户设备采集感应的信息。
					记录现实实际动态或者已经发生的互联网活动：纯粹记录信息而已，比如excel互联网方式录入--传到云端实际的存储介质、新闻稿编写发送回总部
			>源信息：源产品信息。
			>推荐模块生成的信息：推荐的产品。

		>基本流程：
			>收集数据:
			>生成推荐：
			>查询推荐：
		>基本功能：你查看了一个产品，后台推荐给你若干条你可能需要的东西。--产品、新闻、服务、信息都可以。
		>协同过滤算法：
			>收集用户偏好:用户行为
			>对用户行为：去噪（认为哪些是误操作，去掉）
				     归一化：数值比例差距大，所以每种行为转换为分数才合理，都是整数，则不好综合各个行为得出情感度量-情感计算的“分值”
			>综合行为分组比重，加权计算出一个用户--产品--喜欢程度分值的矩阵。（这只是估计，估算，不是客观真理，只是一种大致的经验性的猜测）。尽管使用了数学工具--来表示和计算。


		>实际推荐系统：
			>电影推荐系统：
				>建立两个数据结构：每个用户喜欢的电影-评分集合：map
						   每部电影的所有喜欢者集合：map
				>计算每一个用户的推荐电影：
						   先计算这个用户的所有邻居用户中---偏好最近的20个：邻居用户：认为是也喜欢这个用户喜欢的电影的人（即至少有一部共同喜好的电影，才是邻居），最近的邻居（共同喜好的电影多，第二，把每个用户喜欢的电影的评分集合作为一个有序向量，计算两个用户的这个向量的距离--作为亲近程度的判断标准：越近越亲）
						   再计算这20个邻居喜欢的电影的集合中喜欢者数目最多的5部电影：


		>推荐引擎建立：Mahout:
				>内部含有算法实现：而又对hadoop支持，所以可以在分布式环境、云计算环境中执行--更高效。
					>推荐引擎三大类算法：
						>根据内容：同类商品推荐。（热门的）
						>根据协同过滤：相似用户购买的其他商品。（同类买了同样的这还买的）（相似用户：相似固有属性或者喜好）
						>根据关联规则：购物篮中一同出现的商品组合。（这一商品的最佳组合商品）
				>mahout在hadoop集群中的运行算法：
					

1.参考资料：
1.http://geek.csdn.net/news/detail/135349（百联推荐系统架构过程）
2.http://www.cnblogs.com/NeilHappy/p/4622741.html（另一个推荐系统）
3.http://www.cnblogs.com/zlslch/p/6788976.html（正路---Mahout推荐系统---图文俱全）
4.http://blog.csdn.net/sun_wangdong/article/details/59483790（hadoop下的推荐系统----代码详细）
5.http://blog.csdn.net/huhui_cs/article/details/8596388（实例强劲--电影推荐系统--Mahout）
6.https://grouplens.org/datasets/movielens/（实验数据集）
7.http://blog.csdn.net/acdreamers/article/details/44672305（电影推荐系统--协同过滤算法）
8.（推荐引擎）