1.问题描述：言之有物，言之有序。

	互联网就像是一条大街，而网站就像是一个个店铺。新加一家店铺就是新开了一个网站，大家都可以进来逛逛，看看买卖。店的类型可以很多，超市，菜市场，一般的电器手机店，等等。
	网站也可以不只是一个店铺，而可以是机构，政府机构、银行、保险公司金融机构，等等。可以进去查看信息，还可以办事。
	>预知：
		>业务的描述和设计：就是考虑业务流程,业务流程细化明确，这个脱离技术的关键的东西，就描述出来了。
				   >预备：业务流程是可以脱离具体技术实现而独立抽象层面描述的讨论的。业务流程图。业务蓝图。
		>提供什么服务？解决什么实际问题？问题的解决肯定需要做一系列的事情，而这些事情非常麻烦耗时耗力耗资源，花钱多，而且一般人做不来做不了也没有能力智力做因为很困难？而现在我们可以帮大家做这些事情完成这些事情，而且收费很低，划算，大家只需要使用我们提供的服务就可以了，使用我们的服务需要走一个流程，流程也非常简单不需要耗费什么体力和智力。。所以说，提供的某种样的办事业务流程办事流程是面向客户的，是面向使用者的，是使用者知道的。。而我们的系统则是要实现这些业务流程，来对实际数据发生相应的变化？
			>推论1：思考用户需要解决什么问题。发现了用户需要解决的问题，就是发现了机遇。	
			>推论2：发现用户需要解决什么问题、思考需要做哪些事情才能解决这个问题（思考即分析，再思考哪些部分是可以我们做的，即公共做的，使用公共服务完成的。进而思考用户只需要做哪些事情，什么事情--即我们的业务流程中的每件事情。）、思考每件事情具体怎么做（怎么完成，怎么技术实现）。
				>推论2.2：对于每一件事情的技术实现：
					>对事情的观念：处理对象、处理方法（函数）、输出结果。
					>开始事情的流程：整理对象（抽象对象属性，数据库设计）---> 开发对对象抽取出对应的数据结构的处理算法  --> 可视化展现输出结果（清晰简易明了）
							>数据库设计：对象的层层分类，整理出不同类型的对象，一棵类树，同时明确指出各个类之间固有应有的关联关系和类的实体之间具有的对应关系。而对于每个对象，是类的实例化，有若干个属性--精细设计
								    >三大范式：是对属性的设计、列的设计的要求：a.每列具有原子性、不能包含太多的信息糅合的信息（导致查询不方便，有糅合的，要分离出来，分离为新的列。。即不要把一个对象的多个属性都糅合到一个列一个属性当中。建议先进行对象设计，再进行表设计）
														b.每列都要只和主键相关，而不是和其他列相关（否则导致存储冗余，因为分主键都可能是可以重复的。有和其他列相关的，这些列都要提取出来，构成一个新的表。。即不要把不同对象的各个列糅合在一个表中，构造表，就是构造一个对象，所以可以持有引用--即外键，而不能包含引用对象的属性）
														 c.每列直接和主键相关，不能含有无关的（即便说其他列和主键一一对应，但是糅合在一起丧失了拓展性）
									--------------一句话：属性和属性不要糅合在一起，对象和对象不要糅合在一起。（不同的属性不要糅合在一起，不同的对象不要糅合在一起）
								     >设计：从中央、基础的对象开始。对象明确，对象之间的引用明确，则表明确了、表之间的关系也明确了。
									    再根据实际查询情况，对间接关联的表双方或一方可以设计一个外键即持有对方的引用。---从而不用通过中间表而直接关联了--在查询上会方便一些。
							>处理算法：
								>sql查询、分组排序
								>协同过滤算法等数据挖掘算法：
								>机器学习离线处理算法：
								>spark离线处理算法：

		>公司的运转：新业务的发现。
	>理论：