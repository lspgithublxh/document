>安全业务逻辑：
	>概念：
		>密钥：
			>RSA公钥密码体制：算法是公开的。
		>加密/解密算法：
		>签名：除了作者，没人能生成签名。所以 hash结果 的加密算法是私钥加密。解密签名：数字证书。
			>数字签名：指纹的@CA私钥加密结果。
		>数字证书：好处：客户端可以证明 证书里的 公钥 属于 证书里的 所有者， 第二，证明 所有者就是目标所有者。
			>客户端进行数字证书检查：纯本地检查。
			>客户端证明	证明 对方是私钥持有者-即是正确的服务端：生成一随机字符串，后发送给服务端，服务端用私钥加密收到的这个随机字符串(再hash)， 发送给客户端，客户端用公钥解密，得到字符串，和 之前的字符串(再hash)比较，如果一样，那么证明 对方是 正确的服务端。
			>证书内容：
				>证书的发布机构：SecureTrust CA
				>证书有效期：过了有效期，证书作废。
				>公钥：2048位。
				>主题：证书持有者。某个公司名。
				>签名使用的算法：证书里的数字签名所使用的算法。这个算法 结合 公钥 就可以 对指纹 进行解密。
				>指纹和指纹算法：
					>指纹：整个证书的hash值。
					>指纹算法：即hash算法。
					-和证书放在一起的是： SecureTrust CA 的私钥@CA 和 签名算法 对 指纹 加密后的结果。这个结果是 数字签名。(证书 + 证书的指纹的数字签名 放在一起)
					-指纹和指纹算法的实际保存形式：用 SecureTrust CA 的私钥@CA 加密后的结果。(数字签名？)
				>SecureTrust CA 自己的证书：即不仅给别人颁发证书，自己也有公钥私钥。自己的公钥 在操作系统出厂时就 安装了--windows和linux上都有。
			>证书验证：两条线得出的指纹进行比较。分别是从两部分信息得出指纹。
				>线1：证书 + 指纹算法 ： 得出 指纹。
				>线2：证书的指纹的数字签名 + 公钥 + 签名算法 ： 得出 指纹。 
			>某公司发布它的证书：客户端的验证过程。
				>先看证书里的发布机构：如果是 SecureTrust CA 则继续：
				>查找操作系统里的这个证书发布机构的证书：找到了，则再找到证书里CA的公钥。
				>用CA公钥 + 签名算法 解密 数字签名 ：得出 指纹 和指纹算法。
				>用指纹算法 计算出 证书的指纹：将这个指纹 和 上一步得出的指纹 比较。如果一致 则 ：公司证书未被修改过(指纹不变)、且证书是CA发布的(公钥可解)、且公司证书中的公钥肯定是公司的(指纹不变)。	
		>散列hash: hash的结果不可逆，把这个hash结果加密后 就可以当作签名。
	>规则：
		>服务端和客户端通信：
			>密钥和对称加密算法交换阶段：客户端 将密钥和对称加密算法 (通过获取的公钥和算法 加密后) 传递给服务端。
			>实质的通信阶段：双方的内容都是加密的，不能被解密看到。即至少要求是对称加密。
	>问题：
		>服务器如何把公钥发布给客户？-发数字证书(数字证书里就是公钥)。
		>服务器随随便便就去用私钥解密一个来路不明的字符串？ 不安全的。服务端收到字符串后先hash 再私钥加密。
		>通信过程中某个时刻黑客截获加密信息后重复发送多次？信息中加入随机数或者序号，如果接受方查看到之前接收到出现过的随机值，则停止通信。
		>通信过程中某个时刻黑客截获加密信息后修改这个密文？明文+明文的hash值一起被对称加密 后发送给对方，收到后 解密后 先hash检查明文是否和hash值相等(不等则证明密文被修改了)。
	
SSL: 向应用层提供 认证 和 保密 服务。三个子协议:
	>握手协议：服务器和客户端的认证与密钥交换。
	>记录协议：数据加密并保证数据完整性。
	>警报协议：规定错误类型和处理机制。
	-双向认证SSL协议的具体过程：
		>客户端发送一个连接请求给服务器：
		>服务器发送自己的证书给客户端：
		>客户端验证证书是否由自己信赖的CA中心签发的：是则继续验证：双线(公钥解密线/指纹算法计算线) 计算出 2个指纹，如果一致；则证书完整未被修改过-且信任CA中心签发的。取得 服务端的公钥。
		>客户端发送自己的证书给服务端：服务端验证这个证书，如果验证通过，获得公钥。如果没有通过，则拒绝连接。
		>客户端验证通过则发送自己支持的一套对称加密算法方案给服务端：
		>服务端选择一个最高强度的方案：并用客户端的公钥加密后发送给客户端。
		>客户端收到后用公钥解开，选择一个通话密钥，用服务端的公钥加密后发送给服务端：
		>服务端收到后用客户端的公钥解开：得到了通话对称加密算法的密钥。
		-这样：客户端和服务端都获得了 对称加密算法和密钥。
		-接下来：通话通过 对称加密算法 和密钥加密后发送给对方。
	
	
	
参考资料：
https://www.cnblogs.com/kevin860/p/10258544.html	基本概念：
https://zhuanlan.zhihu.com/p/139940495	ssl过程。
