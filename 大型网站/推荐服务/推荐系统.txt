
>推荐算法1：
	>已知：每个问题的各个知识点涉及度(0,1);---成为题目的特征向量。
			每个学生对问题有需要程度;----需要程度和题目的特征向量有关，也和用户对各个知识点的欠缺度 有关；并且认为越欠缺越涉及则需要度越大；从而可以有 “需要度=题目的特征向量*用户的知识点欠缺度向量”(或者叫“题目对该用户的 '知识加权提供量'：'平均提供量': '对用户的综合价值'”)。//需求就是价值
			
			
			
	>问题：学生的欠缺度未知。
		>解决方法：通过学习得出。计算得出。不断的接近调参得出。学习函数、误差函数、效果函数：定义为  1/2m *Σ(学生j对i问题的计算需求度  - 实际需求度)^2  .....目的是得出用户当前对各个知识的欠缺度(首先是假定 用户对各个已回答问题的真实需求度是准的，那么当前知识欠缺度和问题的知识提供量的向量积就要逼近问题的真实需求度：：逼近算法就是梯度下降法---梯度方向就是变化最快的方向-就是极值的方向或者说顶点的方向：：那么就可以得出用户的当前知识欠缺度)，并且在每次推荐和使用之后更新推荐，并且用户信息也要不断更新。
					那么在已知用户当前的知识欠缺度的情况下，给定一批问题，且问题的知识提供量/相当于蔬菜的各种营养成分已知，那么就可以计算出这些问题对用户的“计算需求度”了，做个高低排序，就是推荐的问题；；答题的反馈是：问题的需求度更新--比如答对了则更新需求度更低--而答错了则更新需求度更高，调节得更高//另一种调节手段是仍然调节知识欠缺度：根据问题的知识含有量而加权地调节各个知识的欠缺度。同理，如果是推荐一个人食物，那么就可以推荐用户今天吃什么(新产品)(同理，每天可以产生一个推荐菜单并且精确到食物和量)(同样，用户的各方面的营养欠缺度也需要知道，环境-身体状况-吃的历史等信息也需要)。(电影推荐，娱乐推荐，学习推荐，...)
						(此系统并非是根据用户点击量和用户评分和用户地址和用户信息进行的推荐)
						
		
	>问题2：普通推荐系统：协同推荐系统
		>
		
	>问题3：推荐系统基本模型：需求者-提供者-推荐者
		>被推荐对象的用户(需求者)：用户当前的各个营养要素占有程度/掌握度。Xj
		>推荐给用户的对象(提供者)：每个对象本身能提供的各个营养要素的量值。Qi
		----选择对象的依据：用户对一个对象的需求程度---值的计算式：R(Xj,Qi) ，按需求度高低。
		----使用对象后的反馈作用到需求者：作用到Xj即可：Xj=F(Xj)。也有人调节R中的参数。
		----模型优劣的评测：推荐n次中，每次的推荐结果和每次反馈后的营养要素占有程度，分别是多少。优劣标准函数：G(Q[],X[],R,F)
		
		
	
	>问题4：推荐系统第二模型：相似用户和评分
		>用户：本身用户基本信息。Uj
		>物品：产品基本信息。Pi
		---选择物品的依据：物品来源:相似用户R3(Uj,Uk)购买的也是当前用户需要的，这些产品的相似产品R4(Pi,Pk)也是需要的，一次购买的所有物品认为是相似的，pro_list(Uj,Pi)。物品排序：按评分高低排序。R(Si, Ni,...).评分已经有，不用计算；或者使用新的实时的计算方法得出---即评分矩阵S2(i,j)中其他用户的所有评分作为计算的参数--得出本次推荐的综合评分R2(S2)。
		---使用物品后的反馈到消费记录：新增消费：各个物品的个数Ni、评分(反馈)(产品体验)Si。add_list(Ni,Si)；或者用户对商品的评分S2(Uj,Pi)矩阵。更新物品相似度Akl矩阵=R1(Akl,plist,...)，用户相似度Ymn矩阵=R2(Akl,plist1,plist2,Uj1,Uj2,...)(购买的物品重合度高则相似度要增加一点)。
		---模型优劣的评测：查看推荐后的反馈。//模拟一个真实的用户。
		
	>问题5：推荐系统第三模型：基于内容的相似物品
	