1.划分、区分、分出、抽出、提取出、分离、离析、分辨出、归类、抽象，定义更大范围的概念，的目的是什么？为什么要指明所属的类型，定义一种类型?
  因为预想“大量构造某种东西，比如一种软件一种程序（如web程序）”时（对于软件构造），发现构造动作有很多时重复的，构造的东西中有
  相似的部分，差别很小的部分，功能相似的部分，结构相同可能只是参数不同的部分。一遍又一遍的重复写，所以想到把它从某个东西里抽出来，抽象它，
  形成一个可配置的模板，只要在配置中说明相应的参数，整个软件表现结果就是原来独立专门写的结果。
  不断的抽出相似的模块，相似的流程，相似的资源，一层又一层地往上抽，往下抽。
   所以MVC是不断抽取出来的结果，抽取出来的人们发现的有的三类资源：流程资源：记为C,数据结构资源：记为M,视图资源：记为V，
   而不是事先规定的资源类型。事先不知道，是不断开发中发现了重复，为了减少重复而分析出的推出的方法。把软件、web程序按资源类型划分的三种资源类型，
  而不是按照功能类型划分。一个项目的SSH、SSM才是按照功能类型划分，javeee平台的server和项目也是按照功能类型划分的。
  还发现分离出来后，各个资源、模块还具有异步迭代（发展，演化）的功能（各自迭代发展自己的，像cpu和内存一样各自独立演化发展，之间接口保持一致即可）---从模块角度，
  而不止 动态复用（松散复用，配置复用，通过在文件中修改配置的方式，程序下次读取配置文件时就会有不同的相应的表现---常常为修改具体实现类，这样，不用重新编译程序，而直接
重启程序就可以改变程序为新的想要的样子了：当然是有局限的：一般只改变了具体实现类）



结论：一切XXX框架都是抽出来的，按照功能类型、资源类型抽取提取分离抽象出来的，程序中只留下共同特征，具体特征都在配置文件中，包括某种功能的实现类的选择。
     抽取出来的好处都包含：异步迭代  动态复用。