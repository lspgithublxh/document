1.问题描述：
	>架构本质：
	>预备：
		>网站加速反应-减少到网站应用服务器的请求：CDN（缓存服务器放在ISP的机房里，用户请求必经的网络）、反向代理（缓存服务器放在网站的中央机房里）
		>用户请求的负载均衡：应用服务器集群、微服务+消息队列+服务注册中心
				     >业务拆分：各功能模块分别部署、互相不影响-独立演化发展、还可统一管理-互相通信互相接口调用。比如用户登录模块、首页模块、数据库访问模块（尤其数据库集群系统）、业务A模块、业务B模块、服务C模块、服务D模块
		>减少对数据库的请求：本地缓存和分布式缓存服务器集群
				     >本地缓存：把部分常访问的数据缓存在内存中

		>对数据库请求的分流：读写分离--而做主从复制
				     >主从复制：写到主服务器时，主复制到从服务器。从服务器和主服务器都可以被读。
		>数据库表数据过多而拆分存储：分表--分布式数据库
		>文件数据的过多而拆分存储：分块--分布式文件系统
		>结构化数据结构及其搜索：NoSQL和搜索引擎
					 >原始数据往往可以存，离线分析数据往往也可以存在这里。

	>架构问题、技术方案、使用原因--分析证明的若干个观点和判断和性质（场景和系统）：
		>数据库的伸缩性架构：（数据库服务器的负载压力）
		>系统在高并发场景下的性能评估和性能测试：
		>系统瓶颈：（网站架构的本质）
		>4+1视图模型-多角度描述软件系统设计
		>性能、可用性、伸缩性、扩展性、安全：
		>负载均衡、异步处理、分布式缓存：
		>数据库的写入性能：
		>最终是解决业务问题：而业务问题可以业务手段也可以技术手段解决。
		>技术选型和架构决策时的调查的对象及其描述、分析的对象及其结论、判断的对象及其结论，，，等等考虑作为根据：
				

	>模式和套路：（即极多的网站都这么架构且效果好）
		>预备：常见三大问题：高并发、海量数据、高可靠运行
			>架构目标：高性能、高可用、易伸缩、可扩展、安全
		>方法1-也是首先：逻辑分层：外层调用里层，高层调用/依赖底层（底层实现高层的接口，再底层实现上层的接口。最底层无需调用其他接口）。MVC模式、网络通信协议7层架构模式、
				 >不只是方便开发维护，而分层每层如果独立部署独立演化，那么在不同的机器上的缘故就支持了高并发发展为分布式服务。高并发最终向分布式发展，分布式本身也是支持高并发的。
				（把视图、服务、数据库访问接口分开）
		>方法2-第二步：并列功能分割：视图拆分为多块而独立部署演化，服务拆分为多块而独立部署演化、数据库访问接口也是。纵向的分割，为多个模块，每个模块之间互不影响高内聚低耦合而独立开发维护部署，从而系统更健壮、稳定可用（而不是一下子互相牵连全部倒塌）。
				（可以独立出去的业务都独立出去，分离分割出去）
		>方法3-第三步：分布式化（服务、静态资源、数据库存储、计算、配置、锁、文件系统）
			  >解决分布式的问题：特征-问题：通过网络--性能低，服务器多了宕机概率大--影响其他调用服务而使得网站可用性降低，分布式环境--数据分散而数据一致性问题存在（分布式事务），对于开发而维护困难
			  >分布了--并发性好   独立了--开发效率高迭代快  专门了---复用性高数据库连接少
			  >
			

	>什么是价值：
		--被使用就是价值。被使用得多，价值就大。被用来解决的问题越多，价值就越高。
		>为什么会被使用：新客户：功能新奇有趣、好玩（人们都图新鲜）、有用、解决了需求、产品简单好用有品位、体验过程中被尊重被帮助有地位、性能出乎意料没人抱怨
				 老客户：解决了需求、养成了习惯、经常有变化新意、越来越强与多（对新客户又呈现简单基本不复杂，而需要长时间探索新功能）

		>


