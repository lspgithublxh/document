1.问题描述：
	>预知：
	     >逻辑可靠：
	     >结构稳定：结构也是固化某些必须长期稳定不变的东西，而其他东西都不指定（像战略--产品结构战略，长期不变的，也不可能天天都改变的，让用户疲于习惯的）。
			结构稳定也是运行稳定，运行如果经常崩溃或者运行缓慢，响应速度慢，而原因就是因为结构上的阻碍，那么不是稳定的结构，也要调整。
			那么什么是稳定的结构：
	     >模块可扩展：职责的实现就是模块，模块实现是有层次的，从接口层到具体实现层，使用运行参数把功能聚合起来。运行参数中指定功能组合，功能的实现者组合。从而实现可以替换--不断更好：纵向扩展，或者直接替换为新的功能--直接扩展了增加了：横向扩展，从而灵活组合---产生新的功能。
			  可扩展之三：上述是提供两种方向的实现，这里则不提供太具体的实现，而是只提供框架-结构流程上的实现--即只是固化一个流程，流程上某节点的输入输出实现交给用户----回调函数--接口方法。
			  可扩展之四：也提供实现，但是是元素性质的实现，各类元素的实现，而用户可以用这些元素来架设自己的流程和功能。
			
	>内容：长久有效，简便扩展。
	      >为此要解决的问题：设计之初就要考虑到：
			>突然高峰访问，可能不可用，可能阻塞，可能会导致崩溃，崩溃而数据丢失？
			>需求改变和新增，客户不同种类，新的实例，而扩展维护方便？
			>运转它所需要的资源消耗小？还是快速增长？


	      >为此需要知道已经有的经验：明确发现的问题、情景、建立的模型、重要的观点：
			>进程间耦合度：
			>可用性：CAP定理中：每个请求不管失败成功都有响应。

	     