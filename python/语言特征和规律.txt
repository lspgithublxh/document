1.问题描述：python脚本语言：所以可以类似javascript理解（比如有函数，比如同样可以创建类和对象）
	
	>解释器解释原理：解释python语言编写的代码
		>内存情况：
			>变量的内存存储情形：
					# 基本数据类型：整形、浮点型、布尔型、字符串
					# 基本数据结构：数组、list, set , map，对象
			>类和方法的存储情形：
			>运行时方法调用栈情形：
			

	>命名特征和规范：
		#变量、类、方法
	>程序使用符号：
		控制流程：冒号和空格
		函数：括号和逗号
		字符串：双引号
		对象调用方法：点
		------：没有分号，没有大括号
	>类和方法：
	>变量类型和运算：
		>对于集合运算非常简便

	>流程控制：
	>异常处理：

	>实现基本功能：集合操作、文件读存、网络编程、新线程|进程、数据库连接访问操作
	>如何实现接口编程、职责单一、暴露最终的设计模式：
		>由于没有明确变量类型，所以完全接口编程，而且含义多态。（实际类型多态）

	>ThreadLocal问题：
		>每个线程有自己的容器，每个线程有自己的全局变量，解决调用方法层层传递参数的问题-----接口不变，而参数全部从容器里面取，即从线程容器线程的全局变量中去取，运行参数也全部放到一个容器里。
			而ThreadLocal的对象管理每个线程的这些全局变量，而每个线程都能从ThreadLocal对象中获取自己存进去的变量
			----即ThreadLocal对象负责把线程传递过来的变量存到线程自己的全局变量容器中，也负责将线程自己的全局变量容器里的变量返回给线程自己。。线程就像背着书包的学生，ThreadLocal就像给每个学生的书包放书和取出书的人。封装了一下代码，线程取数据更加方便而已。
	>IO密集型开发和计算密集型开发：
		>IO密集，那么编写代码量最小的语言最好。脚本语言。----主要时间在IO等待，而不是在cpu上计算。而且要用多线程模型，多进程模型。因为尽管多，但是大部分时间在等待，所以cpu完全应付得过来。
		>计算密集，那么编写的代码运行最快的语言最好。C	
	>异步IO:
		>事件驱动模型，单线程就可以，多核cpu，那么可以多个进程。异步IO来处理，调度更简单，更高效。不用等待IO，而做其他事，IO来了会中断通知。
	>分布式计算：
		>数据结构在网络上（某一个ip下）
		>客户端获取到的数据结构--是一个包装类，是新的实现，是一个数据结构的客户端，而调用这个数据结构客户端的方法实际上是进行网络操作，请求服务端对实际数据结构进行操作。
		>webservice实现了网络调用rpc调用，所以也可以实现分布式计算。同样，所有的网络通信也可以。
	>邮件服务：
		>MUA：邮件用户代理，将邮件通过smtp协议发送到MTA;或者用imap协议从MDA获取邮件。
		>MTA:邮件传输代理，将MUA请求传来的邮件发送到本地的MDA或者发送到其他的MTA。
		>MDA:邮件交付代理，将MTA传来的邮件保存在数据库里；或者用imap协议或者pop3协议将邮件发送给MUA.
		------smtp：简单邮件传输协议
		      pop3: post office protocal邮局协议
		      imap:因特网消息连接协议
	>函数式编程：脚本语言一般可以函数式编程	
		>特征1：可以返回一个函数
			函数可以作为一个参数传递
			只处理，不使用变量。--没有局部变量
		>特征2：使得一个函数是功能多态的
			是纯函数编程对面向对象编程中接口编程的类似，是开闭原则的体现。。---使得这样的函数基本不用改动---而可以改变传递过去的函数而改变了具体实现功能----函数也变成了运行参数。
			可以动态定义函数-----即函数里面定义一个函数，而返回这个运行时定义的函数。：即在定义一个函数的时候，就给它传递一个运行时数据过去。局部变量仍然保留----在函数运行完的时候-----被定义的函数所引用---：但是函数被调用一次，只会形成一个局部变量--不会形成任何拷贝。所以，函数被多次调用，那么每次都会形成一个新的局部变量--占用不同的内存空间--如果被引用那么调用结束不会被删除。
					-----函数的每次调用会形成一个闭包（变量容器，容器里包括一般变量或者函数变量）（可以重复定义同名的函数--比如在循环中定义）
			可以利用参数中的字符串定义出一个同名的函数。
		


		>具体应用：
			>高阶函数
			>map()，reduce()函数，filter()函数----类似map()但是是一个减少序列元素个数用的。
			>装饰器：输入A函数，返回调用A函数的新函数。而这个整体函数就是装饰器。。还可以定义一个返回装饰器的函数。且都可以注解在任何一个函数上，因为注解在执行的时候会看返回的值---如果是函数，会继续执行返回的函数，直到最终结果！即while((typeof fun) == function) {fun = fun();continue;}
			>偏函数：用来改变一个函数的某些输入参数的默认值，返回一个新的函数，从而方便调用。	

		>思想：
			>运算隔离：一个函数，负责一个功能，其他功能应交给其他函数---比如传递一个函数进来。。。所以这样来设计出了map()函数：输入一个处理函数和一个序列，map函数里就遍历序列，用传递函数处理每个序列元素，结果构成另一个序列返回。
						-----map函数像是一个映射。对输入序列的一个映射。 list.add(f(x))   返回list
						----reduce函数像是一个聚合，---吸收运算。对输入序列的每个元素不断吸收运算为新的结果。 m = f(m.x)  返回m   ...reduce（）本身提供了一个吸收流程，具体吸收组合消化算法是外界输入的函数。
	>lamda表达式：用来定义极简匿名函数
			>
							

2.实战：小功能计划：
	>四则运算计算器：
	>web项目基本页面:
		>预知：
		   >http协议：（浏览器遵守，服务器遵守）
			>主要内容：一是规定（定义）资源地址的描述方式（确定方式）（http地址）（描述资源在网络上的地址的方式）(一个请求对应一个资源)
				   二是规定（定义）请求资源的方式（post,get,put,delete）
				   三是规定（定义）客户端传输数据的格式（json格式）
				   四是规定（定义）服务器的状态码（3开头资源重定向问题--没问题，4开头请求问题，5开头服务器问题--解析网页出错了）和返回内容的格式（json,xml,html，js/css,image,多媒体类型，微软文件类型）

				   五是规定（定义）请求报文的报头（get /path HTTP/1.1 若干个键值对，每个之间都用\r\n分隔)的格式）和报体(报头和报文之间用两个\r\n分开。
				   六十规定（定义）响应报文的报头（200 ok 若干个键值对，每个之间都用\r\n分隔)的格式）和报体（和报头相隔2个\r\n，报体可以是html文本，可以是图片的二进制数据---即没有任何文本编码的原始数据---颜色二进制数据，还可以是其他多媒体数据，可以是压缩数据Content-Encoding:gzip）
							（原始二进制和编码后的二进制）

	
		  >html协议：网页页面的描述语言（只浏览器遵守，利用，来展现页面效果）

	----------浏览器利用Http协议请求资源，服务器利用Http协议返回资源，浏览器再利用html协议布局页面渲染页面。
		  >wsgi：web server gateway interface
			>wsgi服务器：用户发布一个application(environ, start_response)函数到服务器即可。。当然要配置项目资源路径；
			
	       >实际开发网页：
			>一是不断写url-function这种类似spring-mvc的处理方式。这样对于非静态页面处理就好了---纯粹数据传输。同时可以将功能代码提出为mvc 3层--因为往往处理动态页面。--后端mvc模式，前端mvc模式。
				>后端mvc模式，m是从c到v的数据结构。c是接受请求的控制器，v是动态页面。
				>前端mvc模式，m是请求服务器而传过来的数据结构，c是js控制器控制在页面上的显示，v是已经成型的页面。
			>二是对于静态页面，可以直接读取文件返回。
			>三是对于动态页面，使用模板， 		
		
		
3.修炼：以战促学促思考
	>前进中将会遇到的问题计划：
	>常见操作计划：
	   >字符串拼接：


4.经验--插件
	>BeautifulSoup就是python的jquery,能够很好的访问到一个html页面中各个层次的内容
	>pip install
5、额外体会：
	>BS架构方式就是更新快，客户端不需要做什么。而CS模式就需要升级客户端，比较麻烦。
	>手机的未来：是空间显示---这样对肉眼最好--但不保密。不用升级客户端app必然是以后的一种趋势。

参考资料：
1.http://www.cnblogs.com/toutou/p/4774284.html（入门参考资料）
2.http://www.cnblogs.com/cocowool/p/6599855.html?utm_source=tuicool&utm_medium=referral（高手讲述资料）
3.http://www.cnblogs.com/gongyuhonglou/p/6706559.html（python的封装，继承和多态，私有化）
4.http://www.jb51.net/article/67699.htm（python3超级新特性，中文名类都可以）
5.http://www.cnblogs.com/Lands-ljk/p/5447127.html（url访问的深入统一函数和类）
6.http://www.cnblogs.com/Lands-ljk/p/5444619.html(实战项目，拉钩网站上的职位信息抓取)
7.http://blog.csdn.net/github_27109687/article/details/53375275(爬虫相关，存到mysql数据库)
8.http://python.jobbole.com/（高价值参考资料网站）
9.https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832648091917b035146084c43b05754ec9408dfaf000（非常全面的python开发，到网页的教程）
10.http://blog.csdn.net/testcs_dn/article/details/50449048(原生python httpserver方式)
11.http://blog.csdn.net/pi9nc/article/details/23204449（Django网站开发）